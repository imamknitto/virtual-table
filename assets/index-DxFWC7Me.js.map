{"version":3,"file":"index-DxFWC7Me.js","sources":["../../src/pages/examples-page/server-filter-page/components/api-integration-section.tsx","../../src/pages/examples-page/server-filter-page/components/code-block.tsx","../../src/pages/examples-page/server-filter-page/components/features-section.tsx","../../src/pages/examples-page/server-filter-page/utils/api.ts","../../src/pages/examples-page/server-filter-page/utils/table-headers.ts","../../src/pages/examples-page/server-filter-page/utils/constants.ts","../../src/pages/examples-page/server-filter-page/utils/render-cells.tsx","../../src/pages/examples-page/server-filter-page/components/implementation-guide-section.tsx","../../src/pages/examples-page/server-filter-page/components/next-steps-section.tsx","../../src/pages/examples-page/server-filter-page/hooks/use-server-filter.ts","../../src/pages/examples-page/server-filter-page/components/preview-section.tsx","../../src/pages/examples-page/server-filter-page/index.tsx"],"sourcesContent":["import { memo } from 'react';\n\nconst ApiIntegrationSection = () => {\n  return (\n    <section>\n      <h2 className='text-2xl font-semibold tracking-tight mb-4'>API Integration</h2>\n      <div className='border rounded-lg p-4'>\n        <h3 className='font-semibold mb-2'>ðŸ“¡ Data Source</h3>\n        <p className='text-sm text-muted-foreground mb-3'>\n          This example uses <strong>JSONPlaceholder API</strong> - a free fake REST API for\n          testing and prototyping:\n        </p>\n        <ul className='text-sm text-muted-foreground space-y-1 mb-4'>\n          <li>\n            â€¢ <code className='bg-muted px-1 rounded'>https://jsonplaceholder.typicode.com/users</code>{' '}\n            - User data\n          </li>\n          <li>\n            â€¢ <code className='bg-muted px-1 rounded'>https://jsonplaceholder.typicode.com/posts</code>{' '}\n            - Post data\n          </li>\n        </ul>\n        <div className='bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded p-3'>\n          <p className='text-sm text-blue-800 dark:text-blue-200'>\n            <strong>ðŸ’¡ Tip:</strong> Replace the API endpoints with your own backend API to\n            implement real server filtering. The filtering logic can be adapted to work with any REST\n            API or GraphQL endpoint.\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(ApiIntegrationSection);\n\n","import { memo } from 'react';\n\ntype CodeBlockProps = {\n  title: string;\n  code: string;\n};\n\nconst CodeBlock = ({ title, code }: CodeBlockProps) => {\n  return (\n    <div className='border rounded-lg overflow-hidden'>\n      <div className='bg-muted px-4 py-2 border-b'>\n        <span className='text-sm font-medium'>{title}</span>\n      </div>\n      <pre className='p-4 overflow-x-auto bg-background'>\n        <code className='text-sm'>{code}</code>\n      </pre>\n    </div>\n  );\n};\n\nexport default memo(CodeBlock);\n\n","import { memo } from 'react';\n\nconst FeaturesSection = () => {\n  return (\n    <section>\n      <h2 className='text-2xl font-semibold tracking-tight mb-4'>Server Filter Features</h2>\n      <div className='grid gap-4 md:grid-cols-2'>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>ðŸš€ Performance Benefits</h3>\n          <ul className='text-sm text-muted-foreground space-y-1'>\n            <li>â€¢ Server-side filtering reduces client-side processing</li>\n            <li>â€¢ Handles large datasets efficiently</li>\n            <li>â€¢ Optimized database queries</li>\n            <li>â€¢ Reduced network payload</li>\n            <li>â€¢ Better memory management</li>\n          </ul>\n        </div>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>ðŸ”§ Filter Types</h3>\n          <ul className='text-sm text-muted-foreground space-y-1'>\n            <li>\n              â€¢ <strong>Search:</strong> Text-based filtering\n            </li>\n            <li>\n              â€¢ <strong>Selection:</strong> Multi-select dropdown filters\n            </li>\n            <li>\n              â€¢ <strong>Advanced:</strong> Complex filter conditions\n            </li>\n            <li>\n              â€¢ <strong>Sorting:</strong> Server-side column sorting\n            </li>\n            <li>\n              â€¢ <strong>Combined:</strong> Multiple filters simultaneously\n            </li>\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(FeaturesSection);\n\n","import type { CombinedData, FilterParams, Post, User } from './types';\n\nconst API_BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const fetchUsers = async (): Promise<User[]> => {\n  const response = await fetch(`${API_BASE_URL}/users`);\n  if (!response.ok) throw new Error('Failed to fetch users');\n  return response.json();\n};\n\nexport const fetchPosts = async (): Promise<Post[]> => {\n  const response = await fetch(`${API_BASE_URL}/posts`);\n  if (!response.ok) throw new Error('Failed to fetch posts');\n  return response.json();\n};\n\nexport const fetchCombinedData = async (filterParams?: FilterParams): Promise<CombinedData[]> => {\n  const [users, posts] = await Promise.all([fetchUsers(), fetchPosts()]);\n\n  // Combine data\n  let combinedData: CombinedData[] = users.map((user) => {\n    const userPosts = posts.filter((post) => post.userId === user.id);\n    return {\n      ...user,\n      postCount: userPosts.length,\n      posts: userPosts.slice(0, 3),\n    };\n  });\n\n  // Apply search filter\n  if (filterParams?.search) {\n    Object.entries(filterParams.search).forEach(([key, value]) => {\n      if (value) {\n        combinedData = combinedData.filter((item) => {\n          const itemValue = item[key as keyof CombinedData];\n          const stringValue = typeof itemValue === 'object' && itemValue !== null \n            ? JSON.stringify(itemValue) \n            : String(itemValue || '');\n          return stringValue.toLowerCase().includes(value.toLowerCase());\n        });\n      }\n    });\n  }\n\n  // Apply selection filter\n  if (filterParams?.selection) {\n    Object.entries(filterParams.selection).forEach(([key, values]) => {\n      if (values.length > 0) {\n        combinedData = combinedData.filter((item) => {\n          const itemValue = item[key as keyof CombinedData];\n          const stringValue = typeof itemValue === 'object' && itemValue !== null\n            ? JSON.stringify(itemValue)\n            : String(itemValue);\n          return values.includes(stringValue);\n        });\n      }\n    });\n  }\n\n  // Apply advance filter\n  if (filterParams?.advance) {\n    Object.entries(filterParams.advance).forEach(([key, filter]) => {\n      if (filter.value) {\n        combinedData = combinedData.filter((item) => {\n          const itemValue = item[key as keyof CombinedData];\n          const stringValue = typeof itemValue === 'object' && itemValue !== null\n            ? JSON.stringify(itemValue)\n            : String(itemValue || '');\n          const itemValueLower = stringValue.toLowerCase();\n          const filterValue = filter.value.toLowerCase();\n\n          switch (filter.config_name) {\n            case 'equal':\n              return itemValueLower === filterValue;\n            case 'notEqual':\n              return itemValueLower !== filterValue;\n            case 'startsWith':\n              return itemValueLower.startsWith(filterValue);\n            case 'endsWith':\n              return itemValueLower.endsWith(filterValue);\n            case 'contains':\n              return itemValueLower.includes(filterValue);\n            case 'notContains':\n              return !itemValueLower.includes(filterValue);\n            default:\n              return true;\n          }\n        });\n      }\n    });\n  }\n\n  // Apply sorting\n  if (filterParams?.sort?.key && filterParams.sort.order !== 'unset') {\n    combinedData.sort((a, b) => {\n      const sortKey = filterParams.sort!.key as keyof CombinedData;\n      let aVal = a[sortKey];\n      let bVal = b[sortKey];\n\n      // Convert objects to strings for comparison\n      if (typeof aVal === 'object' && aVal !== null) {\n        aVal = JSON.stringify(aVal) as any;\n      }\n      if (typeof bVal === 'object' && bVal !== null) {\n        bVal = JSON.stringify(bVal) as any;\n      }\n\n      if (aVal == null || bVal == null) return 0;\n      if (aVal < bVal) return filterParams.sort!.order === 'asc' ? -1 : 1;\n      if (aVal > bVal) return filterParams.sort!.order === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }\n\n  return combinedData;\n};\n\n","import type { IHeader } from '../../../../components/virtual-table';\nimport type { CombinedData } from './types';\n\nexport const getUserHeaders = (): IHeader<CombinedData>[] => [\n  { key: 'id', caption: 'ID', width: 80 },\n  {\n    key: 'name',\n    caption: 'Name',\n    width: 180,\n    filterSelectionOptions: ['Leanne Graham', 'Ervin Howell', 'Clementine Bauch', 'Patricia Lebsack'],\n  },\n  {\n    key: 'username',\n    caption: 'Username',\n    width: 120,\n    filterSelectionOptions: ['Bret', 'Antonette', 'Samantha', 'Karianne'],\n  },\n  { key: 'email', caption: 'Email', width: 200 },\n  {\n    key: 'phone',\n    caption: 'Phone',\n    width: 150,\n    filterSelectionOptions: ['1-770-736-8031 x56442', '010-692-6593 x09125', '1-463-123-4447'],\n  },\n  {\n    key: 'website',\n    caption: 'Website',\n    width: 120,\n    filterSelectionOptions: ['hildegard.org', 'anastasia.net', 'ramiro.info', 'kale.biz'],\n  },\n  {\n    key: 'address' as keyof CombinedData,\n    caption: 'City',\n    width: 120,\n    filterSelectionOptions: ['Gwenborough', 'Wisokyburgh', 'McKenziehaven', 'South Elvis'],\n    renderCell: (item) => item.address.city,\n  },\n  {\n    key: 'company' as keyof CombinedData,\n    caption: 'Company',\n    width: 150,\n    filterSelectionOptions: [\n      'Romaguera-Crona',\n      'Deckow-Crist',\n      'Romaguera-Jacobson',\n      'Robel-Corkery',\n    ],\n    renderCell: (item) => item.company.name,\n  },\n  {\n    key: 'postCount',\n    caption: 'Posts',\n    width: 80,\n  },\n];\n\n","export const CODE_EXAMPLES = {\n  main: `import { useState, useEffect, useCallback } from 'react';\nimport { VirtualTable, type IHeader } from '@knitto/virtual-table';\nimport type { TSortOrder, TFilterAdvanceConfig } from '@knitto/virtual-table/lib/types';\n\n// Types for our API data\ntype User = {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  phone: string;\n  website: string;\n  address: {\n    street: string;\n    suite: string;\n    city: string;\n    zipcode: string;\n  };\n  company: {\n    name: string;\n    catchPhrase: string;\n    bs: string;\n  };\n};\n\ntype CombinedData = User & {\n  postCount: number;\n};\n\nconst ServerFilterTable = () => {\n  const [data, setData] = useState<CombinedData[]>([]);\n  const [loading, setLoading] = useState(false);\n  \n  // Server filter states\n  const [filters, setFilters] = useState({\n    search: {} as Record<string, string>,\n    sort: { key: null as string | null, order: 'unset' as TSortOrder },\n    selection: {} as Record<string, string[]>,\n    advance: {} as Record<string, { config_name: TFilterAdvanceConfig; value: string }>,\n  });\n\n  // Fetch data from API with server-side filtering\n  const fetchData = useCallback(async (filterParams?: {\n    search?: Record<string, string>;\n    sort?: { key: string; order: TSortOrder };\n    selection?: Record<string, string[]>;\n    advance?: Record<string, { config_name: TFilterAdvanceConfig; value: string }>;\n  }) => {\n    setLoading(true);\n    try {\n      // Fetch users from API\n      const usersResponse = await fetch('https://jsonplaceholder.typicode.com/users');\n      const users: User[] = await usersResponse.json();\n\n      // Fetch posts to get post counts\n      const postsResponse = await fetch('https://jsonplaceholder.typicode.com/posts');\n      const posts = await postsResponse.json();\n\n      // Combine data\n      const combinedData: CombinedData[] = users.map(user => ({\n        ...user,\n        postCount: posts.filter(post => post.userId === user.id).length,\n      }));\n\n      // Apply server-side filtering\n      let filteredData = combinedData;\n\n      // Apply search filter\n      if (filterParams?.search) {\n        Object.entries(filterParams.search).forEach(([key, value]) => {\n          if (value) {\n            filteredData = filteredData.filter(item => {\n              const itemValue = item[key as keyof CombinedData];\n              const stringValue = typeof itemValue === 'object' && itemValue !== null\n                ? JSON.stringify(itemValue)\n                : String(itemValue || '');\n              return stringValue.toLowerCase().includes(value.toLowerCase());\n            });\n          }\n        });\n      }\n\n      // Apply selection filter\n      if (filterParams?.selection) {\n        Object.entries(filterParams.selection).forEach(([key, values]) => {\n          if (values.length > 0) {\n            filteredData = filteredData.filter(item => {\n              const itemValue = item[key as keyof CombinedData];\n              const stringValue = typeof itemValue === 'object' && itemValue !== null\n                ? JSON.stringify(itemValue)\n                : String(itemValue);\n              return values.includes(stringValue);\n            });\n          }\n        });\n      }\n\n      // Apply advance filter\n      if (filterParams?.advance) {\n        Object.entries(filterParams.advance).forEach(([key, filter]) => {\n          if (filter.value) {\n            filteredData = filteredData.filter(item => {\n              const itemValue = item[key as keyof CombinedData];\n              const stringValue = typeof itemValue === 'object' && itemValue !== null\n                ? JSON.stringify(itemValue)\n                : String(itemValue || '');\n              const itemValueLower = stringValue.toLowerCase();\n              const filterValue = filter.value.toLowerCase();\n              \n              switch (filter.config_name) {\n                case 'equal': return itemValueLower === filterValue;\n                case 'notEqual': return itemValueLower !== filterValue;\n                case 'startsWith': return itemValueLower.startsWith(filterValue);\n                case 'endsWith': return itemValueLower.endsWith(filterValue);\n                case 'contains': return itemValueLower.includes(filterValue);\n                case 'notContains': return !itemValueLower.includes(filterValue);\n                default: return true;\n              }\n            });\n          }\n        });\n      }\n\n      // Apply sorting\n      if (filterParams?.sort?.key && filterParams.sort.order !== 'unset') {\n        filteredData.sort((a, b) => {\n          const sortKey = filterParams.sort!.key as keyof CombinedData;\n          let aVal = a[sortKey];\n          let bVal = b[sortKey];\n          \n          // Convert objects to strings for comparison\n          if (typeof aVal === 'object' && aVal !== null) {\n            aVal = JSON.stringify(aVal) as any;\n          }\n          if (typeof bVal === 'object' && bVal !== null) {\n            bVal = JSON.stringify(bVal) as any;\n          }\n          \n          if (aVal == null || bVal == null) return 0;\n          if (aVal < bVal) return filterParams.sort!.order === 'asc' ? -1 : 1;\n          if (aVal > bVal) return filterParams.sort!.order === 'asc' ? 1 : -1;\n          return 0;\n        });\n      }\n\n      setData(filteredData);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setData([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Initial data fetch\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Define table headers with filter options\n  const headers: IHeader<CombinedData>[] = [\n    { key: 'id', caption: 'ID', width: 80 },\n    { \n      key: 'name', \n      caption: 'Name', \n      width: 180,\n      filterSelectionOptions: ['Leanne Graham', 'Ervin Howell', 'Clementine Bauch']\n    },\n    { key: 'username', caption: 'Username', width: 120 },\n    { key: 'email', caption: 'Email', width: 200 },\n    { key: 'phone', caption: 'Phone', width: 150 },\n    { key: 'website', caption: 'Website', width: 120 },\n    { \n      key: 'address.city', \n      caption: 'City', \n      width: 120,\n      filterSelectionOptions: ['Gwenborough', 'Wisokyburgh', 'McKenziehaven']\n    },\n    { \n      key: 'company.name', \n      caption: 'Company', \n      width: 150,\n      filterSelectionOptions: ['Romaguera-Crona', 'Deckow-Crist', 'Romaguera-Jacobson']\n    },\n    { \n      key: 'postCount', \n      caption: 'Posts', \n      width: 80,\n      renderCell: (item) => (\n        <span className=\"font-semibold text-blue-600\">{item.postCount}</span>\n      )\n    },\n  ];\n\n  // Handle filter changes\n  const handleFilterChange = useCallback((filterType: 'sort' | 'search' | 'selection' | 'advance', data: unknown) => {\n    const newFilters = { ...filters };\n    \n    if (filterType === 'sort') {\n      newFilters.sort = data as { key: string | null; order: TSortOrder };\n    } else if (filterType === 'search') {\n      newFilters.search = data as Record<string, string>;\n    } else if (filterType === 'selection') {\n      newFilters.selection = data as Record<string, string[]>;\n    } else if (filterType === 'advance') {\n      newFilters.advance = data as Record<string, { config_name: TFilterAdvanceConfig; value: string }>;\n    }\n    \n    setFilters(newFilters);\n    \n    // Only fetch with valid sort key\n    const fetchParams = {\n      ...newFilters,\n      sort: newFilters.sort.key ? { key: newFilters.sort.key, order: newFilters.sort.order } : undefined\n    };\n    \n    fetchData(fetchParams);\n  }, [filters, fetchData]);\n\n  return (\n    <VirtualTable\n      headers={headers}\n      data={data}\n      rowKey=\"id\"\n      headerMode=\"double\"\n      rowHeight={32}\n      headerHeight={40}\n      filterHeight={32}\n      isLoading={loading}\n      useServerFilter={{\n        sort: true,\n        search: true,\n        selection: true,\n        advance: true,\n      }}\n      onChangeFilter={{\n        sort: (key, sortBy) => handleFilterChange('sort', { key, order: sortBy }),\n        search: (searchData) => handleFilterChange('search', searchData),\n        selection: (selectionData) => handleFilterChange('selection', selectionData),\n        advance: (advanceData) => handleFilterChange('advance', advanceData),\n      }}\n    />\n  );\n};\n\nexport default ServerFilterTable;`,\n\n  enableServerFilter: `useServerFilter={{\n  sort: true,        // Enable server-side sorting\n  search: true,      // Enable server-side search\n  selection: true,   // Enable server-side selection filter\n  advance: true,     // Enable server-side advance filter\n}}`,\n\n  handleFilterChanges: `onChangeFilter={{\n  sort: (key, sortBy) => {\n    // Handle sorting - make API call with sort parameters\n    fetchData({ sort: { key, order: sortBy } });\n  },\n  search: (searchData) => {\n    // Handle search - make API call with search parameters\n    fetchData({ search: searchData });\n  },\n  selection: (selectionData) => {\n    // Handle selection filter - make API call with filter parameters\n    fetchData({ selection: selectionData });\n  },\n  advance: (advanceData) => {\n    // Handle advance filter - make API call with complex filter parameters\n    fetchData({ advance: advanceData });\n  },\n}}`,\n\n  serverSideProcessing: `// Example API endpoint logic\napp.get('/api/users', (req, res) => {\n  const { search, sort, selection, advance } = req.query;\n  \n  let query = db.users.find();\n  \n  // Apply search filters\n  if (search) {\n    Object.entries(search).forEach(([field, value]) => {\n      query = query.where(field).contains(value);\n    });\n  }\n  \n  // Apply selection filters\n  if (selection) {\n    Object.entries(selection).forEach(([field, values]) => {\n      query = query.where(field).in(values);\n    });\n  }\n  \n  // Apply sorting\n  if (sort) {\n    query = query.orderBy(sort.key, sort.order);\n  }\n  \n  const results = query.exec();\n  res.json(results);\n});`,\n};\n\n","import type { CombinedData } from './types';\n\nexport const renderPostCount = (item: CombinedData) => (\n  <span className='font-semibold text-blue-600 dark:text-blue-400'>{item.postCount}</span>\n);\n\n","import { memo } from 'react';\nimport { CODE_EXAMPLES } from '../utils';\n\nconst ImplementationGuideSection = () => {\n  return (\n    <section>\n      <h2 className='text-2xl font-semibold tracking-tight mb-4'>Implementation Guide</h2>\n      <div className='space-y-4'>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>1. Enable Server Filtering</h3>\n          <pre className='bg-muted p-3 rounded text-sm overflow-x-auto'>\n            <code>{CODE_EXAMPLES.enableServerFilter}</code>\n          </pre>\n        </div>\n\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>2. Handle Filter Changes</h3>\n          <pre className='bg-muted p-3 rounded text-sm overflow-x-auto'>\n            <code>{CODE_EXAMPLES.handleFilterChanges}</code>\n          </pre>\n        </div>\n\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>3. Server-Side Processing</h3>\n          <p className='text-sm text-muted-foreground mb-2'>\n            In your API endpoint, process the filter parameters:\n          </p>\n          <pre className='bg-muted p-3 rounded text-sm overflow-x-auto'>\n            <code>{CODE_EXAMPLES.serverSideProcessing}</code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(ImplementationGuideSection);\n\n","import { memo } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NextStepsSection = () => {\n  return (\n    <section>\n      <div className='rounded-lg border bg-muted/50 p-6'>\n        <h3 className='font-semibold text-lg mb-2'>ðŸš€ Next Steps</h3>\n        <p className='text-sm text-muted-foreground mb-4'>\n          Ready to explore more advanced features? Check out these examples:\n        </p>\n        <div className='flex flex-wrap gap-2'>\n          <Link\n            className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-8 px-3'\n            to='/docs/examples/column-virtualization'\n          >\n            Column Virtualization\n          </Link>\n          <Link\n            className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-8 px-3'\n            to='/docs/examples/header-grouping'\n          >\n            Header Grouping\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(NextStepsSection);\n","import { useCallback, useEffect, useState } from 'react';\nimport type { TFilterAdvanceConfig, TSortOrder } from '../../../../components/virtual-table/lib/types';\nimport { fetchCombinedData } from '../utils/api';\nimport type { CombinedData, ServerFilters } from '../utils/types';\n\nexport const useServerFilter = () => {\n  const [data, setData] = useState<CombinedData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [filters, setFilters] = useState<ServerFilters>({\n    search: {},\n    sort: { key: null, order: 'unset' },\n    selection: {},\n    advance: {},\n  });\n\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const fetchParams = {\n        ...filters,\n        sort: filters.sort.key ? { key: filters.sort.key, order: filters.sort.order } : undefined,\n      };\n\n      const result = await fetchCombinedData(fetchParams);\n      setData(result);\n    } catch (error) {\n      setData([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [filters]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  const handleFilterChange = useCallback(\n    (filterType: 'sort' | 'search' | 'selection' | 'advance', filterData: unknown) => {\n      setFilters((prev) => {\n        const newFilters = { ...prev };\n\n        if (filterType === 'sort') {\n          newFilters.sort = filterData as { key: string | null; order: TSortOrder };\n        } else if (filterType === 'search') {\n          newFilters.search = filterData as Record<string, string>;\n        } else if (filterType === 'selection') {\n          newFilters.selection = filterData as Record<string, string[]>;\n        } else if (filterType === 'advance') {\n          newFilters.advance = filterData as Record<\n            string,\n            { config_name: TFilterAdvanceConfig; value: string }\n          >;\n        }\n\n        return newFilters;\n      });\n    },\n    [],\n  );\n\n  return {\n    data,\n    loading,\n    filters,\n    handleFilterChange,\n  };\n};\n\n","import { memo, useMemo, useState } from 'react';\nimport { VirtualTable } from '../../../../components/virtual-table';\nimport { useServerFilter } from '../hooks';\nimport { CODE_EXAMPLES, renderPostCount } from '../utils';\nimport { getUserHeaders } from '../utils/table-headers';\nimport CodeBlock from './code-block';\n\nconst PreviewSection = () => {\n  const [showCode, setShowCode] = useState(false);\n  const { data, loading, handleFilterChange } = useServerFilter();\n  \n  const headers = useMemo(() => {\n    const baseHeaders = getUserHeaders();\n    // Add renderCell for postCount\n    return baseHeaders.map((header) =>\n      header.key === 'postCount' ? { ...header, renderCell: renderPostCount } : header,\n    );\n  }, []);\n\n  return (\n    <section>\n      <div className='flex items-center justify-between mb-4'>\n        <h2 className='text-2xl font-semibold tracking-tight'>Preview</h2>\n        <button\n          className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2'\n          onClick={() => setShowCode(!showCode)}\n        >\n          {showCode ? 'Hide Code' : 'Show Code'}\n        </button>\n      </div>\n\n      <div className='h-96'>\n        <VirtualTable\n          data={data}\n          filterHeight={32}\n          headerHeight={40}\n          headerMode='double'\n          headers={headers}\n          isLoading={loading}\n          onChangeFilter={{\n            sort: (key, sortBy) => handleFilterChange('sort', { key, order: sortBy }),\n            search: (searchData) => handleFilterChange('search', searchData),\n            selection: (selectionData) => handleFilterChange('selection', selectionData),\n            advance: (advanceData) => handleFilterChange('advance', advanceData),\n          }}\n          rowHeight={32}\n          rowKey='id'\n          useServerFilter={{\n            sort: true,\n            search: true,\n            selection: true,\n            advance: true,\n          }}\n        />\n      </div>\n\n      {showCode && <CodeBlock code={CODE_EXAMPLES.main} title='Server Filter Implementation' />}\n    </section>\n  );\n};\n\nexport default memo(PreviewSection);\n\n","import { memo } from 'react';\nimport {\n  ApiIntegrationSection,\n  FeaturesSection,\n  ImplementationGuideSection,\n  NextStepsSection,\n  PreviewSection,\n} from './components';\n\nconst ServerFilterPage = () => {\n  return (\n    <div className='space-y-8'>\n      {/* Page Header */}\n      <div>\n        <h1 className='text-4xl font-bold tracking-tight'>Server Filter</h1>\n        <p className='text-xl text-muted-foreground mt-4'>\n          Learn how to implement server-side filtering with Knitto Table using real API data. All\n          filtering, sorting, and searching is handled on the server for optimal performance.\n        </p>\n      </div>\n\n      {/* Preview Section with Live Demo */}\n      <PreviewSection />\n\n      {/* Features Overview */}\n      <FeaturesSection />\n\n      {/* API Integration Details */}\n      <ApiIntegrationSection />\n\n      {/* Implementation Guide */}\n      <ImplementationGuideSection />\n\n      {/* Next Steps */}\n      <NextStepsSection />\n    </div>\n  );\n};\n\nexport default memo(ServerFilterPage);\n\n"],"names":["ApiIntegrationSection","jsx","jsxs","ApiIntegrationSection$1","memo","CodeBlock","title","code","CodeBlock$1","FeaturesSection","FeaturesSection$1","API_BASE_URL","fetchUsers","response","fetchPosts","fetchCombinedData","filterParams","users","posts","combinedData","user","userPosts","post","key","value","item","itemValue","values","stringValue","filter","itemValueLower","filterValue","_a","a","b","sortKey","aVal","bVal","getUserHeaders","CODE_EXAMPLES","renderPostCount","ImplementationGuideSection","ImplementationGuideSection$1","NextStepsSection","Link","NextStepsSection$1","useServerFilter","data","setData","useState","loading","setLoading","filters","setFilters","loadData","useCallback","fetchParams","result","useEffect","handleFilterChange","filterType","filterData","prev","newFilters","PreviewSection","showCode","setShowCode","headers","useMemo","header","VirtualTable","sortBy","searchData","selectionData","advanceData","PreviewSection$1","ServerFilterPage","index"],"mappings":"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"}