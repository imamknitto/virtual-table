{"version":3,"file":"index-zb5pdYS-.js","sources":["../../src/pages/examples-page/checkbox-selection-page/components/code-block.tsx","../../src/pages/examples-page/checkbox-selection-page/components/features-section.tsx","../../src/pages/examples-page/checkbox-selection-page/components/next-steps-section.tsx","../../src/pages/examples-page/checkbox-selection-page/utils/data-generator.ts","../../src/pages/examples-page/checkbox-selection-page/utils/table-headers.ts","../../src/pages/examples-page/checkbox-selection-page/utils/constants.ts","../../src/pages/examples-page/checkbox-selection-page/components/preview-section.tsx","../../src/pages/examples-page/checkbox-selection-page/components/selection-status-section.tsx","../../src/pages/examples-page/checkbox-selection-page/components/usage-tips-section.tsx","../../src/pages/examples-page/checkbox-selection-page/hooks/use-checkbox-selection.ts","../../src/pages/examples-page/checkbox-selection-page/index.tsx"],"sourcesContent":["import { memo } from 'react';\n\ntype CodeBlockProps = {\n  title: string;\n  code: string;\n};\n\nconst CodeBlock = ({ title, code }: CodeBlockProps) => {\n  return (\n    <div className='border rounded-lg overflow-hidden'>\n      <div className='bg-muted px-4 py-2 border-b'>\n        <span className='text-sm font-medium'>{title}</span>\n      </div>\n      <pre className='p-4 overflow-x-auto bg-background'>\n        <code className='text-sm'>{code}</code>\n      </pre>\n    </div>\n  );\n};\n\nexport default memo(CodeBlock);\n\n","import { memo } from 'react';\n\nconst FeaturesSection = () => {\n  return (\n    <section>\n      <h2 className='text-2xl font-semibold tracking-tight mb-4'>Checkbox Selection Features</h2>\n      <div className='grid gap-4 md:grid-cols-2'>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>✅ Selection Features</h3>\n          <ul className='text-sm text-muted-foreground space-y-1'>\n            <li>• Individual row selection with checkboxes</li>\n            <li>• Select all functionality in header</li>\n            <li>• Deselect individual rows when \"select all\" is active</li>\n            <li>• Real-time selection state tracking</li>\n            <li>• Custom selection change callbacks</li>\n          </ul>\n        </div>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>🎯 Implementation</h3>\n          <ul className='text-sm text-muted-foreground space-y-1'>\n            <li>• Add `row-selection` key to headers</li>\n            <li>• Use `onChangeCheckboxRowSelection` callback</li>\n            <li>• Track selected/deselected rows state</li>\n            <li>• Handle select all vs individual selection</li>\n            <li>• Customize checkbox column width</li>\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(FeaturesSection);\n\n","import { memo } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NextStepsSection = () => {\n  return (\n    <section>\n      <div className='rounded-lg border bg-muted/50 p-6'>\n        <h3 className='font-semibold text-lg mb-2'>🚀 Next Steps</h3>\n        <p className='text-sm text-muted-foreground mb-4'>\n          Ready to explore more advanced features? Check out these examples:\n        </p>\n        <div className='flex flex-wrap gap-2'>\n          <Link\n            className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-8 px-3'\n            to='/docs/examples/click-row-action'\n          >\n            Action Cells\n          </Link>\n          <Link\n            className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-8 px-3'\n            to='/docs/examples/expand-row'\n          >\n            Expand Rows\n          </Link>\n          <Link\n            className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-8 px-3'\n            to='/docs/examples/freeze-column'\n          >\n            Freeze Columns\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(NextStepsSection);\n\n","import { faker } from '@faker-js/faker';\nimport type { Employee } from './types';\n\nexport const generateSampleData = (): Employee[] => {\n  return Array.from({ length: 100 }, (_, index) => ({\n    id: index + 1,\n    name: faker.person.fullName(),\n    email: faker.internet.email(),\n    company: faker.company.name(),\n    position: faker.person.jobTitle(),\n    phone: faker.phone.number(),\n    city: faker.location.city(),\n    country: faker.location.country(),\n    salary: faker.number.int({ min: 30000, max: 150000 }),\n    status: faker.helpers.arrayElement(['Active', 'Inactive', 'Pending']) as Employee['status'],\n    department: faker.helpers.arrayElement([\n      'Engineering',\n      'Marketing',\n      'Sales',\n      'HR',\n      'Finance',\n    ]) as Employee['department'],\n  }));\n};\n\n","import type { IHeader } from '../../../../components/virtual-table';\nimport type { Employee } from './types';\n\nexport const getEmployeeHeaders = (): IHeader<Employee>[] => [\n  {\n    key: 'row-selection',\n    caption: '',\n    width: 50,\n    hideHeaderAction: true,\n    hideFilter: {\n      sort: true,\n      search: true,\n      filterSelection: true,\n      filterAdvance: true,\n    },\n  },\n  { key: 'name', caption: 'Name', width: 200 },\n  { key: 'email', caption: 'Email', width: 250 },\n  { key: 'company', caption: 'Company', width: 200 },\n  { key: 'position', caption: 'Position', width: 180 },\n  { key: 'phone', caption: 'Phone', width: 150 },\n  { key: 'city', caption: 'City', width: 150 },\n  { key: 'country', caption: 'Country', width: 120 },\n  { key: 'department', caption: 'Department', width: 120 },\n  { key: 'status', caption: 'Status', width: 100 },\n  {\n    key: 'salary',\n    caption: 'Salary',\n    width: 120,\n    renderCell: (item) => `$${item.salary.toLocaleString()}`,\n  },\n];\n\n","export const CODE_EXAMPLE = `import { VirtualTable, type IHeader } from '@knitto/virtual-table';\nimport { faker } from '@faker-js/faker';\n\n// Generate sample data\nconst generateSampleData = () => {\n  return Array.from({ length: 100 }, (_, index) => ({\n    id: index + 1,\n    name: faker.person.fullName(),\n    email: faker.internet.email(),\n    company: faker.company.name(),\n    position: faker.person.jobTitle(),\n    phone: faker.phone.number(),\n    city: faker.location.city(),\n    country: faker.location.country(),\n    salary: faker.number.int({ min: 30000, max: 150000 }),\n    status: faker.helpers.arrayElement(['Active', 'Inactive', 'Pending']),\n    department: faker.helpers.arrayElement(['Engineering', 'Marketing', 'Sales', 'HR', 'Finance']),\n  }));\n};\n\nconst CheckboxSelectionTable = () => {\n  const [data] = useState(generateSampleData());\n  const [selectedRows, setSelectedRows] = useState<(string | number)[]>([]);\n  const [deselectedRows, setDeselectedRows] = useState<(string | number)[]>([]);\n  const [isSelectAll, setIsSelectAll] = useState(false);\n\n  // Define table headers with checkbox selection\n  const headers: IHeader<(typeof data)[0]>[] = [\n    { \n      key: 'row-selection', \n      caption: '', \n      width: 50,\n      hideHeaderAction: true,\n      hideFilter: {\n        sort: true,\n        search: true,\n        filterSelection: true,\n        filterAdvance: true,\n      }\n    },\n    { key: 'name', caption: 'Name', width: 200 },\n    { key: 'email', caption: 'Email', width: 250 },\n    { key: 'company', caption: 'Company', width: 200 },\n    { key: 'position', caption: 'Position', width: 180 },\n    { key: 'phone', caption: 'Phone', width: 150 },\n    { key: 'city', caption: 'City', width: 150 },\n    { key: 'country', caption: 'Country', width: 120 },\n    { key: 'department', caption: 'Department', width: 120 },\n    { key: 'status', caption: 'Status', width: 100 },\n    {\n      key: 'salary',\n      caption: 'Salary',\n      width: 120,\n      renderCell: (item) => \\`$\\${item.salary.toLocaleString()}\\`,\n    },\n  ];\n\n  // Handle checkbox selection changes\n  const handleCheckboxSelection = (\n    selectedRows: (string | number)[],\n    deselectedRows: (string | number)[],\n    isSelectAll: boolean\n  ) => {\n    setSelectedRows(selectedRows);\n    setDeselectedRows(deselectedRows);\n    setIsSelectAll(isSelectAll);\n  };\n\n  return (\n    <VirtualTable\n      headers={headers}\n      data={data}\n      rowKey=\"id\"\n      headerMode=\"double\"\n      rowHeight={32}\n      headerHeight={40}\n      filterHeight={32}\n      onChangeCheckboxRowSelection={handleCheckboxSelection}\n    />\n  );\n};`;\n\n","import { memo, useState } from 'react';\nimport { VirtualTable } from '../../../../components/virtual-table';\nimport { CODE_EXAMPLE, type Employee } from '../utils';\nimport { getEmployeeHeaders } from '../utils/table-headers';\nimport CodeBlock from './code-block';\n\ntype PreviewSectionProps = {\n  data: Employee[];\n  onCheckboxSelection: (\n    selectedRows: (string | number)[],\n    deselectedRows: (string | number)[],\n    isSelectAll: boolean,\n  ) => void;\n};\n\nconst PreviewSection = ({ data, onCheckboxSelection }: PreviewSectionProps) => {\n  const [showCode, setShowCode] = useState(false);\n  const headers = getEmployeeHeaders();\n\n  return (\n    <section>\n      <div className='flex items-center justify-between mb-4'>\n        <h2 className='text-2xl font-semibold tracking-tight'>Preview</h2>\n        <button\n          className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2'\n          onClick={() => setShowCode(!showCode)}\n        >\n          {showCode ? 'Hide Code' : 'Show Code'}\n        </button>\n      </div>\n\n      <div className='h-96'>\n        <VirtualTable\n          data={data}\n          filterHeight={32}\n          headerHeight={40}\n          headerMode='double'\n          headers={headers}\n          onChangeCheckboxRowSelection={onCheckboxSelection}\n          rowHeight={32}\n          rowKey='id'\n        />\n      </div>\n\n      {showCode && <CodeBlock code={CODE_EXAMPLE} title='Checkbox Selection Example' />}\n    </section>\n  );\n};\n\nexport default memo(PreviewSection);\n\n","import { memo } from 'react';\n\ntype SelectionStatusSectionProps = {\n  selectedRows: (string | number)[];\n  deselectedRows: (string | number)[];\n  isSelectAll: boolean;\n};\n\nconst SelectionStatusSection = ({\n  selectedRows,\n  deselectedRows,\n  isSelectAll,\n}: SelectionStatusSectionProps) => {\n  return (\n    <div className='grid gap-4 md:grid-cols-3'>\n      <div className='border rounded-lg p-4 bg-blue-50 dark:bg-blue-950'>\n        <h3 className='font-semibold text-blue-900 dark:text-blue-200 mb-2'>Selected Rows</h3>\n        <p className='text-2xl font-bold text-blue-700 dark:text-blue-300'>{selectedRows.length}</p>\n        <p className='text-sm text-blue-600 dark:text-blue-400 mt-1'>\n          {selectedRows.length > 0\n            ? `IDs: ${selectedRows.slice(0, 5).join(', ')}${selectedRows.length > 5 ? '...' : ''}`\n            : 'No rows selected'}\n        </p>\n      </div>\n      <div className='border rounded-lg p-4 bg-orange-50 dark:bg-orange-950'>\n        <h3 className='font-semibold text-orange-900 dark:text-orange-200 mb-2'>Deselected Rows</h3>\n        <p className='text-2xl font-bold text-orange-700 dark:text-orange-300'>\n          {deselectedRows.length}\n        </p>\n        <p className='text-sm text-orange-600 dark:text-orange-400 mt-1'>\n          {deselectedRows.length > 0\n            ? `IDs: ${deselectedRows.slice(0, 5).join(', ')}${deselectedRows.length > 5 ? '...' : ''}`\n            : 'No rows deselected'}\n        </p>\n      </div>\n      <div className='border rounded-lg p-4 bg-green-50 dark:bg-green-950'>\n        <h3 className='font-semibold text-green-900 dark:text-green-200 mb-2'>Select All Status</h3>\n        <p className='text-2xl font-bold text-green-700 dark:text-green-300'>\n          {isSelectAll ? 'Active' : 'Inactive'}\n        </p>\n        <p className='text-sm text-green-600 dark:text-green-400 mt-1'>\n          {isSelectAll ? 'All rows are selected' : 'Individual selection mode'}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SelectionStatusSection);\n\n","import { memo } from 'react';\n\nconst UsageTipsSection = () => {\n  return (\n    <section>\n      <h2 className='text-2xl font-semibold tracking-tight mb-4'>Usage Tips</h2>\n      <div className='space-y-4'>\n        <div className='border rounded-lg p-4 bg-blue-50 dark:bg-blue-950'>\n          <h3 className='font-semibold text-blue-900 dark:text-blue-200 mb-2'>💡 Pro Tips</h3>\n          <ul className='text-sm text-blue-800 dark:text-blue-300 space-y-1'>\n            <li>• Use `hideHeaderAction: true` and `hideFilter` to clean up the checkbox column</li>\n            <li>\n              • The `onChangeCheckboxRowSelection` callback provides three parameters: selected\n              rows, deselected rows, and select all status\n            </li>\n            <li>\n              • When `isSelectAll` is true, individual selections are tracked as deselected rows\n            </li>\n            <li>• You can implement bulk actions using the selection state</li>\n          </ul>\n        </div>\n        <div className='border rounded-lg p-4 bg-yellow-50 dark:bg-yellow-950'>\n          <h3 className='font-semibold text-yellow-900 dark:text-yellow-200 mb-2'>\n            ⚠️ Important Notes\n          </h3>\n          <ul className='text-sm text-yellow-800 dark:text-yellow-300 space-y-1'>\n            <li>• The `row-selection` key is reserved for checkbox functionality</li>\n            <li>• Make sure your `rowKey` is unique for each row</li>\n            <li>• Selection state is managed internally by the component</li>\n            <li>• Use the callback to sync with your application state</li>\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(UsageTipsSection);\n\n","import { useCallback, useState } from 'react';\n\nexport const useCheckboxSelection = () => {\n  const [selectedRows, setSelectedRows] = useState<(string | number)[]>([]);\n  const [deselectedRows, setDeselectedRows] = useState<(string | number)[]>([]);\n  const [isSelectAll, setIsSelectAll] = useState(false);\n\n  const handleCheckboxSelection = useCallback(\n    (\n      selected: (string | number)[],\n      deselected: (string | number)[],\n      selectAll: boolean,\n    ) => {\n      setSelectedRows(selected);\n      setDeselectedRows(deselected);\n      setIsSelectAll(selectAll);\n    },\n    [],\n  );\n\n  return {\n    selectedRows,\n    deselectedRows,\n    isSelectAll,\n    handleCheckboxSelection,\n  };\n};\n\n","import { memo, useMemo } from 'react';\nimport {\n  FeaturesSection,\n  NextStepsSection,\n  PreviewSection,\n  SelectionStatusSection,\n  UsageTipsSection,\n} from './components';\nimport { useCheckboxSelection } from './hooks';\nimport { generateSampleData } from './utils';\n\nconst CheckboxSelectionPage = () => {\n  const data = useMemo(() => generateSampleData(), []);\n  const { selectedRows, deselectedRows, isSelectAll, handleCheckboxSelection } =\n    useCheckboxSelection();\n\n  return (\n    <div className='space-y-8'>\n      {/* Page Header */}\n      <div>\n        <h1 className='text-4xl font-bold tracking-tight'>Checkbox Selection</h1>\n        <p className='text-xl text-muted-foreground mt-4'>\n          Learn how to implement checkbox selection in your virtual table with individual row\n          selection and select all functionality.\n        </p>\n      </div>\n\n      {/* Selection Status */}\n      <SelectionStatusSection\n        deselectedRows={deselectedRows}\n        isSelectAll={isSelectAll}\n        selectedRows={selectedRows}\n      />\n\n      {/* Preview Section */}\n      <PreviewSection data={data} onCheckboxSelection={handleCheckboxSelection} />\n\n      {/* Features Section */}\n      <FeaturesSection />\n\n      {/* Usage Tips */}\n      <UsageTipsSection />\n\n      {/* Next Steps */}\n      <NextStepsSection />\n    </div>\n  );\n};\n\nexport default memo(CheckboxSelectionPage);\n\n"],"names":["CodeBlock","title","code","jsxs","jsx","CodeBlock$1","memo","FeaturesSection","FeaturesSection$1","NextStepsSection","Link","NextStepsSection$1","generateSampleData","_","index","faker","getEmployeeHeaders","item","CODE_EXAMPLE","PreviewSection","data","onCheckboxSelection","showCode","setShowCode","useState","headers","VirtualTable","PreviewSection$1","SelectionStatusSection","selectedRows","deselectedRows","isSelectAll","SelectionStatusSection$1","UsageTipsSection","UsageTipsSection$1","useCheckboxSelection","setSelectedRows","setDeselectedRows","setIsSelectAll","handleCheckboxSelection","useCallback","selected","deselected","selectAll","CheckboxSelectionPage","useMemo"],"mappings":"gRAOA,MAAMA,EAAY,CAAC,CAAE,MAAAC,EAAO,KAAAC,KAExBC,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,8BACb,SAAAA,EAAAA,IAAC,QAAK,UAAU,sBAAuB,WAAM,CAAA,CAC/C,EACAA,EAAAA,IAAC,OAAI,UAAU,oCACb,eAAC,OAAA,CAAK,UAAU,UAAW,SAAAF,CAAA,CAAK,CAAA,CAClC,CAAA,EACF,EAIJG,EAAeC,EAAAA,KAAKN,CAAS,EClBvBO,EAAkB,WAEnB,UAAA,CACC,SAAA,CAAAH,EAAAA,IAAC,KAAA,CAAG,UAAU,6CAA6C,SAAA,8BAA2B,EACtFD,EAAAA,KAAC,MAAA,CAAI,UAAU,4BACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,wBACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,qBAAqB,SAAA,uBAAoB,EACvDD,EAAAA,KAAC,KAAA,CAAG,UAAU,0CACZ,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAA,4CAAA,CAA0C,EAC9CA,EAAAA,IAAC,MAAG,SAAA,sCAAA,CAAoC,EACxCA,EAAAA,IAAC,MAAG,SAAA,wDAAA,CAAsD,EAC1DA,EAAAA,IAAC,MAAG,SAAA,sCAAA,CAAoC,EACxCA,EAAAA,IAAC,MAAG,SAAA,qCAAA,CAAmC,CAAA,CAAA,CACzC,CAAA,EACF,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,wBACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,qBAAqB,SAAA,oBAAiB,EACpDD,EAAAA,KAAC,KAAA,CAAG,UAAU,0CACZ,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAA,sCAAA,CAAoC,EACxCA,EAAAA,IAAC,MAAG,SAAA,+CAAA,CAA6C,EACjDA,EAAAA,IAAC,MAAG,SAAA,wCAAA,CAAsC,EAC1CA,EAAAA,IAAC,MAAG,SAAA,6CAAA,CAA2C,EAC/CA,EAAAA,IAAC,MAAG,SAAA,mCAAA,CAAiC,CAAA,CAAA,CACvC,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAIJI,EAAeF,EAAAA,KAAKC,CAAe,EC7B7BE,EAAmB,IAErBL,EAAAA,IAAC,UAAA,CACC,SAAAD,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,6BAA6B,SAAA,gBAAa,EACxDA,EAAAA,IAAC,IAAA,CAAE,UAAU,qCAAqC,SAAA,qEAElD,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,uBACb,SAAA,CAAAC,EAAAA,IAACM,EAAA,CACC,UAAU,sTACV,GAAG,kCACJ,SAAA,cAAA,CAAA,EAGDN,EAAAA,IAACM,EAAA,CACC,UAAU,sTACV,GAAG,4BACJ,SAAA,aAAA,CAAA,EAGDN,EAAAA,IAACM,EAAA,CACC,UAAU,sTACV,GAAG,+BACJ,SAAA,gBAAA,CAAA,CAED,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,EAIJC,EAAeL,EAAAA,KAAKG,CAAgB,ECjCvBG,EAAqB,IACzB,MAAM,KAAK,CAAE,OAAQ,KAAO,CAACC,EAAGC,KAAW,CAChD,GAAIA,EAAQ,EACZ,KAAMC,EAAM,OAAO,SAAA,EACnB,MAAOA,EAAM,SAAS,MAAA,EACtB,QAASA,EAAM,QAAQ,KAAA,EACvB,SAAUA,EAAM,OAAO,SAAA,EACvB,MAAOA,EAAM,MAAM,OAAA,EACnB,KAAMA,EAAM,SAAS,KAAA,EACrB,QAASA,EAAM,SAAS,QAAA,EACxB,OAAQA,EAAM,OAAO,IAAI,CAAE,IAAK,IAAO,IAAK,KAAQ,EACpD,OAAQA,EAAM,QAAQ,aAAa,CAAC,SAAU,WAAY,SAAS,CAAC,EACpE,WAAYA,EAAM,QAAQ,aAAa,CACrC,cACA,YACA,QACA,KACA,SAAA,CACD,CAAA,EACD,ECnBSC,EAAqB,IAA2B,CAC3D,CACE,IAAK,gBACL,QAAS,GACT,MAAO,GACP,iBAAkB,GAClB,WAAY,CACV,KAAM,GACN,OAAQ,GACR,gBAAiB,GACjB,cAAe,EAAA,CACjB,EAEF,CAAE,IAAK,OAAQ,QAAS,OAAQ,MAAO,GAAA,EACvC,CAAE,IAAK,QAAS,QAAS,QAAS,MAAO,GAAA,EACzC,CAAE,IAAK,UAAW,QAAS,UAAW,MAAO,GAAA,EAC7C,CAAE,IAAK,WAAY,QAAS,WAAY,MAAO,GAAA,EAC/C,CAAE,IAAK,QAAS,QAAS,QAAS,MAAO,GAAA,EACzC,CAAE,IAAK,OAAQ,QAAS,OAAQ,MAAO,GAAA,EACvC,CAAE,IAAK,UAAW,QAAS,UAAW,MAAO,GAAA,EAC7C,CAAE,IAAK,aAAc,QAAS,aAAc,MAAO,GAAA,EACnD,CAAE,IAAK,SAAU,QAAS,SAAU,MAAO,GAAA,EAC3C,CACE,IAAK,SACL,QAAS,SACT,MAAO,IACP,WAAaC,GAAS,IAAIA,EAAK,OAAO,gBAAgB,EAAA,CAE1D,EC/BaC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ICetBC,EAAiB,CAAC,CAAE,KAAAC,EAAM,oBAAAC,KAA+C,CAC7E,KAAM,CAACC,EAAUC,CAAW,EAAIC,EAAAA,SAAS,EAAK,EACxCC,EAAUT,EAAA,EAEhB,cACG,UAAA,CACC,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,wCAAwC,SAAA,UAAO,EAC7DA,EAAAA,IAAC,SAAA,CACC,UAAU,gSACV,QAAS,IAAMmB,EAAY,CAACD,CAAQ,EAEnC,WAAW,YAAc,WAAA,CAAA,CAC5B,EACF,EAEAlB,EAAAA,IAAC,MAAA,CAAI,UAAU,OACb,SAAAA,EAAAA,IAACsB,EAAA,CACC,KAAAN,EACA,aAAc,GACd,aAAc,GACd,WAAW,SACX,QAAAK,EACA,6BAA8BJ,EAC9B,UAAW,GACX,OAAO,IAAA,CAAA,EAEX,EAECC,GAAYlB,EAAAA,IAACJ,EAAA,CAAU,KAAMkB,EAAc,MAAM,4BAAA,CAA6B,CAAA,EACjF,CAEJ,EAEAS,EAAerB,EAAAA,KAAKa,CAAc,ECzC5BS,EAAyB,CAAC,CAC9B,aAAAC,EACA,eAAAC,EACA,YAAAC,CACF,IAEI5B,EAAAA,KAAC,MAAA,CAAI,UAAU,4BACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,oDACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,sDAAsD,SAAA,gBAAa,EACjFA,EAAAA,IAAC,IAAA,CAAE,UAAU,sDAAuD,WAAa,OAAO,EACxFA,EAAAA,IAAC,KAAE,UAAU,gDACV,WAAa,OAAS,EACnB,QAAQyB,EAAa,MAAM,EAAG,CAAC,EAAE,KAAK,IAAI,CAAC,GAAGA,EAAa,OAAS,EAAI,MAAQ,EAAE,GAClF,kBAAA,CACN,CAAA,EACF,EACA1B,EAAAA,KAAC,MAAA,CAAI,UAAU,wDACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,0DAA0D,SAAA,kBAAe,EACvFA,EAAAA,IAAC,IAAA,CAAE,UAAU,0DACV,WAAe,OAClB,EACAA,EAAAA,IAAC,KAAE,UAAU,oDACV,WAAe,OAAS,EACrB,QAAQ0B,EAAe,MAAM,EAAG,CAAC,EAAE,KAAK,IAAI,CAAC,GAAGA,EAAe,OAAS,EAAI,MAAQ,EAAE,GACtF,oBAAA,CACN,CAAA,EACF,EACA3B,EAAAA,KAAC,MAAA,CAAI,UAAU,sDACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,wDAAwD,SAAA,oBAAiB,QACtF,IAAA,CAAE,UAAU,wDACV,SAAA2B,EAAc,SAAW,WAC5B,QACC,IAAA,CAAE,UAAU,kDACV,SAAAA,EAAc,wBAA0B,2BAAA,CAC3C,CAAA,CAAA,CACF,CAAA,EACF,EAIJC,EAAe1B,EAAAA,KAAKsB,CAAsB,EC9CpCK,EAAmB,WAEpB,UAAA,CACC,SAAA,CAAA7B,EAAAA,IAAC,KAAA,CAAG,UAAU,6CAA6C,SAAA,aAAU,EACrED,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,oDACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,sDAAsD,SAAA,cAAW,EAC/ED,EAAAA,KAAC,KAAA,CAAG,UAAU,qDACZ,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAA,iFAAA,CAA+E,EACnFA,EAAAA,IAAC,MAAG,SAAA,gIAAA,CAGJ,EACAA,EAAAA,IAAC,MAAG,SAAA,oFAAA,CAEJ,EACAA,EAAAA,IAAC,MAAG,SAAA,4DAAA,CAA0D,CAAA,CAAA,CAChE,CAAA,EACF,EACAD,EAAAA,KAAC,MAAA,CAAI,UAAU,wDACb,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,0DAA0D,SAAA,qBAExE,EACAD,EAAAA,KAAC,KAAA,CAAG,UAAU,yDACZ,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAA,kEAAA,CAAgE,EACpEA,EAAAA,IAAC,MAAG,SAAA,kDAAA,CAAgD,EACpDA,EAAAA,IAAC,MAAG,SAAA,0DAAA,CAAwD,EAC5DA,EAAAA,IAAC,MAAG,SAAA,wDAAA,CAAsD,CAAA,CAAA,CAC5D,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAIJ8B,EAAe5B,EAAAA,KAAK2B,CAAgB,ECnCvBE,EAAuB,IAAM,CACxC,KAAM,CAACN,EAAcO,CAAe,EAAIZ,EAAAA,SAA8B,CAAA,CAAE,EAClE,CAACM,EAAgBO,CAAiB,EAAIb,EAAAA,SAA8B,CAAA,CAAE,EACtE,CAACO,EAAaO,CAAc,EAAId,EAAAA,SAAS,EAAK,EAE9Ce,EAA0BC,EAAAA,YAC9B,CACEC,EACAC,EACAC,IACG,CACHP,EAAgBK,CAAQ,EACxBJ,EAAkBK,CAAU,EAC5BJ,EAAeK,CAAS,CAAA,EAE1B,CAAA,CAAC,EAGH,MAAO,CACL,aAAAd,EACA,eAAAC,EACA,YAAAC,EACA,wBAAAQ,CAAA,CAEJ,ECfMK,EAAwB,IAAM,CAClC,MAAMxB,EAAOyB,EAAAA,QAAQ,IAAMjC,EAAA,EAAsB,CAAA,CAAE,EAC7C,CAAE,aAAAiB,EAAc,eAAAC,EAAgB,YAAAC,EAAa,wBAAAQ,CAAA,EACjDJ,EAAA,EAEF,OACEhC,EAAAA,KAAC,MAAA,CAAI,UAAU,YAEb,SAAA,CAAAA,OAAC,MAAA,CACC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,UAAU,oCAAoC,SAAA,qBAAkB,EACpEA,EAAAA,IAAC,IAAA,CAAE,UAAU,qCAAqC,SAAA,6HAAA,CAGlD,CAAA,EACF,EAGAA,EAAAA,IAACwB,EAAA,CACC,eAAAE,EACA,YAAAC,EACA,aAAAF,CAAA,CAAA,EAIFzB,EAAAA,IAACe,EAAA,CAAe,KAAAC,EAAY,oBAAqBmB,CAAA,CAAyB,QAGzEhC,EAAA,EAAgB,QAGhB0B,EAAA,EAAiB,QAGjBxB,EAAA,CAAA,CAAiB,CAAA,EACpB,CAEJ,EAEAK,EAAeR,EAAAA,KAAKsC,CAAqB"}