{"version":3,"file":"index-Bt05Rwrl.js","sources":["../../src/pages/examples-page/expand-row-page/components/api-reference-section.tsx","../../src/pages/examples-page/expand-row-page/utils/data-generator.ts","../../src/pages/examples-page/expand-row-page/utils/table-headers.tsx","../../src/pages/examples-page/expand-row-page/utils/constants.ts","../../src/pages/examples-page/expand-row-page/components/code-block.tsx","../../src/pages/examples-page/expand-row-page/components/render-employee-content.tsx","../../src/pages/examples-page/expand-row-page/components/basic-expand-section.tsx","../../src/pages/examples-page/expand-row-page/components/custom-toggle-section.tsx","../../src/pages/examples-page/expand-row-page/components/features-section.tsx","../../src/pages/examples-page/expand-row-page/components/render-company-content.tsx","../../src/pages/examples-page/expand-row-page/components/nested-table-section.tsx","../../src/pages/examples-page/expand-row-page/components/next-steps-section.tsx","../../src/pages/examples-page/expand-row-page/index.tsx"],"sourcesContent":["import { memo } from 'react';\n\nconst ApiReferenceSection = () => {\n  return (\n    <section>\n      <h2 className='text-2xl font-semibold tracking-tight mb-4'>API Reference</h2>\n      <div className='border rounded-lg overflow-hidden'>\n        <div className='bg-muted px-4 py-2 border-b'>\n          <span className='text-sm font-medium'>Expand Row Props</span>\n        </div>\n        <div className='p-4 space-y-4'>\n          <div>\n            <h4 className='font-medium text-sm mb-2'>onRenderExpandedContent</h4>\n            <p className='text-sm text-muted-foreground mb-2'>\n              Function that renders the expanded content for each row.\n            </p>\n            <code className='text-xs bg-muted px-2 py-1 rounded'>\n              onRenderExpandedContent?: (item: TData) =&gt; React.ReactNode\n            </code>\n          </div>\n          <div>\n            <h4 className='font-medium text-sm mb-2'>renderExpandToggle</h4>\n            <p className='text-sm text-muted-foreground mb-2'>\n              Custom function to render the expand/collapse toggle button.\n            </p>\n            <code className='text-xs bg-muted px-2 py-1 rounded'>\n              renderExpandToggle?: (item: TData, isExpanded: boolean) =&gt; React.ReactNode\n            </code>\n          </div>\n          <div>\n            <h4 className='font-medium text-sm mb-2'>onRowExpand</h4>\n            <p className='text-sm text-muted-foreground mb-2'>\n              Callback function called when a row is expanded or collapsed.\n            </p>\n            <code className='text-xs bg-muted px-2 py-1 rounded'>\n              onRowExpand?: (item: TData) =&gt; void\n            </code>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(ApiReferenceSection);\n\n","import { faker } from '@faker-js/faker';\nimport type { Company, Employee } from './types';\n\nexport const generateEmployeeData = (): Employee[] => {\n  return Array.from({ length: 20 }, (_, index) => ({\n    id: index + 1,\n    name: faker.person.fullName(),\n    email: faker.internet.email(),\n    department: faker.commerce.department(),\n    position: faker.person.jobTitle(),\n    salary: faker.number.int({ min: 30000, max: 150000 }),\n    startDate: faker.date.past({ years: 5 }).toISOString().split('T')[0],\n    phone: faker.phone.number(),\n    address: faker.location.streetAddress(),\n    city: faker.location.city(),\n    country: faker.location.country(),\n    skills: faker.helpers.arrayElements(\n      ['React', 'TypeScript', 'Node.js', 'Python', 'Java', 'C#', 'Go', 'Rust'],\n      { min: 2, max: 5 },\n    ),\n    projects: Array.from({ length: faker.number.int({ min: 1, max: 4 }) }, () => ({\n      name: faker.company.buzzPhrase(),\n      status: faker.helpers.arrayElement(['Active', 'Completed', 'On Hold']) as\n        | 'Active'\n        | 'Completed'\n        | 'On Hold',\n      progress: faker.number.int({ min: 0, max: 100 }),\n    })),\n  }));\n};\n\nexport const generateCompanyData = (): Company[] => {\n  return Array.from({ length: 15 }, (_, index) => ({\n    id: index + 1,\n    companyName: faker.company.name(),\n    industry: faker.commerce.department(),\n    revenue: faker.number.int({ min: 1000000, max: 100000000 }),\n    employees: faker.number.int({ min: 10, max: 1000 }),\n    founded: faker.date.past({ years: 50 }).getFullYear(),\n    ceo: faker.person.fullName(),\n    headquarters: faker.location.city(),\n    departments: Array.from({ length: faker.number.int({ min: 3, max: 8 }) }, () => ({\n      name: faker.commerce.department(),\n      manager: faker.person.fullName(),\n      employees: faker.number.int({ min: 5, max: 50 }),\n      budget: faker.number.int({ min: 100000, max: 5000000 }),\n      teams: Array.from({ length: faker.number.int({ min: 2, max: 5 }) }, () => ({\n        name: faker.company.buzzPhrase(),\n        lead: faker.person.fullName(),\n        members: faker.number.int({ min: 3, max: 15 }),\n        projects: faker.number.int({ min: 1, max: 8 }),\n        status: faker.helpers.arrayElement(['Active', 'Inactive', 'Planning']) as\n          | 'Active'\n          | 'Inactive'\n          | 'Planning',\n      })),\n    })),\n  }));\n};\n\n","import type { IHeader } from '../../../../components/virtual-table';\nimport type { Company, Department, Employee, Team } from './types';\n\nexport const getEmployeeHeaders = (): IHeader<Employee>[] => [\n  { key: 'expand', caption: '', width: 50 },\n  { key: 'name', caption: 'Name', width: 200 },\n  { key: 'email', caption: 'Email', width: 250 },\n  { key: 'department', caption: 'Department', width: 150 },\n  { key: 'position', caption: 'Position', width: 180 },\n  {\n    key: 'salary',\n    caption: 'Salary',\n    width: 120,\n    renderCell: (item) => `$${item.salary.toLocaleString()}`,\n  },\n  { key: 'startDate', caption: 'Start Date', width: 120 },\n];\n\nexport const getCustomEmployeeHeaders = (): IHeader<Employee>[] => [\n  {\n    key: 'expand',\n    caption: '',\n    width: 100,\n    renderExpandToggle: (_item, isExpanded) => (\n      <div className='flex justify-center items-center w-full h-full'>\n        <button\n          data-action='expand'\n          className={`px-1 py-1 rounded text-xs font-medium transition-colors ${\n            isExpanded\n              ? 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 hover:bg-red-200 dark:hover:bg-red-800'\n              : 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 hover:bg-blue-200 dark:hover:bg-blue-800'\n          }`}\n          type='button'\n          aria-label={isExpanded ? 'Collapse row' : 'Expand row'}\n        >\n          {isExpanded ? 'Hide Details' : 'Show Details'}\n        </button>\n      </div>\n    ),\n  },\n  { key: 'name', caption: 'Name', width: 200 },\n  { key: 'email', caption: 'Email', width: 250 },\n  { key: 'department', caption: 'Department', width: 150 },\n  { key: 'position', caption: 'Position', width: 180 },\n  {\n    key: 'salary',\n    caption: 'Salary',\n    width: 120,\n    renderCell: (item) => `$${item.salary.toLocaleString()}`,\n  },\n];\n\nexport const getCompanyHeaders = (): IHeader<Company>[] => [\n  { key: 'expand', caption: '', width: 50 },\n  { key: 'companyName', caption: 'Company', width: 200 },\n  { key: 'industry', caption: 'Industry', width: 150 },\n  {\n    key: 'revenue',\n    caption: 'Revenue',\n    width: 150,\n    renderCell: (item) => `$${(item.revenue / 1000000).toFixed(1)}M`,\n  },\n  { key: 'employees', caption: 'Employees', width: 120 },\n  { key: 'founded', caption: 'Founded', width: 100 },\n  { key: 'ceo', caption: 'CEO', width: 180 },\n  { key: 'headquarters', caption: 'Headquarters', width: 150 },\n];\n\nexport const getDepartmentHeaders = (): IHeader<Department>[] => [\n  { key: 'expand', caption: '', width: 50 },\n  { key: 'name', caption: 'Department', width: 200 },\n  { key: 'manager', caption: 'Manager', width: 200 },\n  { key: 'employees', caption: 'Employees', width: 120, renderCell: (item) => item.employees.toString() },\n  {\n    key: 'budget',\n    caption: 'Budget',\n    width: 150,\n    renderCell: (item) => `$${item.budget.toLocaleString()}`,\n  },\n];\n\nexport const getTeamHeaders = (): IHeader<Team>[] => [\n  { key: 'name', caption: 'Team Name', width: 200 },\n  { key: 'lead', caption: 'Team Lead', width: 180 },\n  { key: 'members', caption: 'Members', width: 100, renderCell: (item) => item.members.toString() },\n  { key: 'projects', caption: 'Projects', width: 100, renderCell: (item) => item.projects.toString() },\n  {\n    key: 'status',\n    caption: 'Status',\n    width: 120,\n    renderCell: (item) => (\n      <span\n        className={`px-2 py-1 rounded text-xs ${\n          item.status === 'Active'\n            ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200'\n            : item.status === 'Inactive'\n              ? 'bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200'\n              : 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200'\n        }`}\n      >\n        {item.status}\n      </span>\n    ),\n  },\n];\n\n","export const CODE_EXAMPLES = {\n  basicExpand: `import { VirtualTable, type IHeader } from '@knitto/virtual-table';\n\nconst EmployeeTable = () => {\n  const [data] = useState(generateEmployeeData());\n\n  const headers: IHeader<(typeof data)[0]>[] = [\n    { key: 'expand', caption: '', width: 50 },\n    { key: 'name', caption: 'Name', width: 200 },\n    { key: 'email', caption: 'Email', width: 250 },\n    { key: 'department', caption: 'Department', width: 150 },\n    { key: 'position', caption: 'Position', width: 180 },\n    { \n      key: 'salary', \n      caption: 'Salary', \n      width: 120, \n      renderCell: (item) => \\`$\\${item.salary.toLocaleString()}\\` \n    },\n    { key: 'startDate', caption: 'Start Date', width: 120 },\n  ];\n\n  const renderExpandedContent = (employee) => (\n    <div className=\"p-4 bg-gray-50 border-l-4 border-blue-500\">\n      <div className=\"grid grid-cols-2 gap-6\">\n        <div>\n          <h4 className=\"font-semibold text-lg mb-3\">Personal Information</h4>\n          <div className=\"space-y-2 text-sm\">\n            <div><span className=\"font-medium\">Phone:</span> {employee.phone}</div>\n            <div><span className=\"font-medium\">Address:</span> {employee.address}</div>\n            <div><span className=\"font-medium\">City:</span> {employee.city}</div>\n            <div><span className=\"font-medium\">Country:</span> {employee.country}</div>\n          </div>\n        </div>\n        <div>\n          <h4 className=\"font-semibold text-lg mb-3\">Skills & Projects</h4>\n          {/* Skills and projects content */}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <VirtualTable\n      headers={headers}\n      data={data}\n      rowKey=\"id\"\n      headerMode=\"double\"\n      rowHeight={32}\n      headerHeight={40}\n      filterHeight={32}\n      onRenderExpandedContent={renderExpandedContent}\n    />\n  );\n};`,\n\n  nestedTable: `import { VirtualTable, type IHeader } from '@knitto/virtual-table';\n\nconst CompanyTable = () => {\n  const [data] = useState(generateCompanyData());\n\n  const renderExpandedContent = (company) => {\n    const departmentHeaders: IHeader<(typeof company.departments)[0]>[] = [\n      { key: 'expand', caption: '', width: 50 },\n      { key: 'name', caption: 'Department', width: 200 },\n      { key: 'manager', caption: 'Manager', width: 200 },\n      { key: 'employees', caption: 'Employees', width: 120 },\n      { key: 'budget', caption: 'Budget', width: 150 },\n    ];\n\n    const renderDepartmentTeams = (department) => (\n      <div className=\"p-3 bg-blue-50 border-l-4 border-blue-400\">\n        <h5 className=\"font-medium text-sm mb-3\">{department.name} Teams</h5>\n        <div className=\"h-48\">\n          <VirtualTable\n            headers={teamHeaders}\n            data={department.teams}\n            rowKey=\"name\"\n            headerMode=\"single\"\n            rowHeight={24}\n            headerHeight={28}\n          />\n        </div>\n      </div>\n    );\n\n    return (\n      <div className=\"p-4 bg-gray-50 border-l-4 border-green-500\">\n        <h4 className=\"font-semibold text-lg mb-4\">Company Departments</h4>\n        <div className=\"h-64\">\n          <VirtualTable\n            headers={departmentHeaders}\n            data={company.departments}\n            rowKey=\"name\"\n            onRenderExpandedContent={renderDepartmentTeams}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <VirtualTable\n      headers={companyHeaders}\n      data={data}\n      rowKey=\"id\"\n      onRenderExpandedContent={renderExpandedContent}\n    />\n  );\n};`,\n\n  customToggle: `import { VirtualTable, type IHeader } from '@knitto/virtual-table';\n\nconst CustomExpandTable = () => {\n  const [data] = useState(generateEmployeeData());\n\n  const headers: IHeader<(typeof data)[0]>[] = [\n    { \n      key: 'expand', \n      caption: '', \n      width: 80,\n      renderExpandToggle: (item, isExpanded) => (\n        <div className=\"flex justify-center items-center w-full h-full\">\n          <button\n            data-action=\"expand\"\n            className={\\`px-3 py-1 rounded text-xs font-medium transition-colors \\${\n              isExpanded \n                ? 'bg-red-100 text-red-800 hover:bg-red-200' \n                : 'bg-blue-100 text-blue-800 hover:bg-blue-200'\n            }\\`}\n            type=\"button\"\n            aria-label={isExpanded ? 'Collapse row' : 'Expand row'}\n          >\n            {isExpanded ? 'Hide Details' : 'Show Details'}\n          </button>\n        </div>\n      )\n    },\n    { key: 'name', caption: 'Name', width: 200 },\n    { key: 'email', caption: 'Email', width: 250 },\n    { key: 'department', caption: 'Department', width: 150 },\n  ];\n\n  return (\n    <VirtualTable\n      headers={headers}\n      data={data}\n      rowKey=\"id\"\n      onRenderExpandedContent={renderExpandedContent}\n    />\n  );\n};`,\n};\n\n","import { memo } from 'react';\n\ntype CodeBlockProps = {\n  title: string;\n  code: string;\n};\n\nconst CodeBlock = ({ title, code }: CodeBlockProps) => {\n  return (\n    <div className='mt-4 border rounded-lg overflow-hidden'>\n      <div className='bg-muted px-4 py-2 border-b'>\n        <span className='text-sm font-medium'>{title}</span>\n      </div>\n      <pre className='p-4 overflow-x-auto bg-background'>\n        <code className='text-sm'>{code}</code>\n      </pre>\n    </div>\n  );\n};\n\nexport default memo(CodeBlock);\n\n","import type { Employee } from '../utils';\n\nexport const renderEmployeeExpandedContent = (employee: Employee) => (\n  <div className='p-4 bg-gray-50 dark:bg-gray-900 border-l-4 border-blue-500 dark:border-blue-400'>\n    <div className='grid grid-cols-2 gap-6'>\n      <div>\n        <h4 className='font-semibold text-lg mb-3 text-gray-800 dark:text-gray-200'>\n          Personal Information\n        </h4>\n        <div className='space-y-2 text-sm'>\n          <div>\n            <span className='font-medium'>Phone:</span> {employee.phone}\n          </div>\n          <div>\n            <span className='font-medium'>Address:</span> {employee.address}\n          </div>\n          <div>\n            <span className='font-medium'>City:</span> {employee.city}\n          </div>\n          <div>\n            <span className='font-medium'>Country:</span> {employee.country}\n          </div>\n        </div>\n      </div>\n      <div>\n        <h4 className='font-semibold text-lg mb-3 text-gray-800 dark:text-gray-200'>\n          Skills & Projects\n        </h4>\n        <div className='space-y-3'>\n          <div>\n            <span className='font-medium text-sm'>Skills:</span>\n            <div className='flex flex-wrap gap-1 mt-1'>\n              {employee.skills.map((skill, idx) => (\n                <span\n                  key={idx}\n                  className='px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs rounded-full'\n                >\n                  {skill}\n                </span>\n              ))}\n            </div>\n          </div>\n          <div>\n            <span className='font-medium text-sm'>Current Projects:</span>\n            <div className='mt-1 space-y-1'>\n              {employee.projects.map((project, idx) => (\n                <div key={idx} className='text-xs'>\n                  <span className='font-medium'>{project.name}</span>\n                  <span\n                    className={`ml-2 px-2 py-0.5 rounded text-xs ${\n                      project.status === 'Active'\n                        ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200'\n                        : project.status === 'Completed'\n                          ? 'bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200'\n                          : 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200'\n                    }`}\n                  >\n                    {project.status}\n                  </span>\n                  <div className='mt-1'>\n                    <div className='w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5'>\n                      <div\n                        className='bg-blue-600 dark:bg-blue-400 h-1.5 rounded-full'\n                        style={{ width: `${project.progress}%` }}\n                      ></div>\n                    </div>\n                    <span className='text-xs text-gray-600 dark:text-gray-400'>{project.progress}%</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\n","import { memo, useState } from 'react';\nimport { VirtualTable } from '../../../../components/virtual-table';\nimport { CODE_EXAMPLES, type Employee } from '../utils';\nimport { getEmployeeHeaders } from '../utils/table-headers';\nimport CodeBlock from './code-block';\nimport { renderEmployeeExpandedContent } from './render-employee-content';\n\ntype BasicExpandSectionProps = {\n  data: Employee[];\n};\n\nconst BasicExpandSection = ({ data }: BasicExpandSectionProps) => {\n  const [showCode, setShowCode] = useState(false);\n  const headers = getEmployeeHeaders();\n\n  return (\n    <section>\n      <div className='flex items-center justify-between mb-4'>\n        <h2 className='text-2xl font-semibold tracking-tight'>Basic Expand Row</h2>\n        <button\n          className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2'\n          onClick={() => setShowCode(!showCode)}\n        >\n          {showCode ? 'Hide Code' : 'Show Code'}\n        </button>\n      </div>\n\n      <div className='mb-4 p-4 bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg'>\n        <p className='text-sm text-blue-800 dark:text-blue-200'>\n          <strong>Example:</strong> Employee table with expandable rows showing detailed personal\n          information, skills, and current projects.\n        </p>\n      </div>\n\n      <div className='h-96'>\n        <VirtualTable\n          data={data}\n          filterHeight={32}\n          headerHeight={40}\n          headerMode='double'\n          headers={headers}\n          onRenderExpandedContent={renderEmployeeExpandedContent}\n          rowHeight={32}\n          rowKey='id'\n        />\n      </div>\n\n      {showCode && <CodeBlock code={CODE_EXAMPLES.basicExpand} title='Basic Expand Row Example' />}\n    </section>\n  );\n};\n\nexport default memo(BasicExpandSection);\n\n","import { memo, useState } from 'react';\nimport { VirtualTable } from '../../../../components/virtual-table';\nimport { CODE_EXAMPLES, type Employee } from '../utils';\nimport { getCustomEmployeeHeaders } from '../utils/table-headers';\nimport CodeBlock from './code-block';\nimport { renderEmployeeExpandedContent } from './render-employee-content';\n\ntype CustomToggleSectionProps = {\n  data: Employee[];\n};\n\nconst CustomToggleSection = ({ data }: CustomToggleSectionProps) => {\n  const [showCode, setShowCode] = useState(false);\n  const headers = getCustomEmployeeHeaders();\n\n  return (\n    <section>\n      <div className='flex items-center justify-between mb-4'>\n        <h2 className='text-2xl font-semibold tracking-tight'>Custom Expand Toggle</h2>\n        <button\n          className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2'\n          onClick={() => setShowCode(!showCode)}\n        >\n          {showCode ? 'Hide Code' : 'Show Code'}\n        </button>\n      </div>\n\n      <div className='mb-4 p-4 bg-purple-50 dark:bg-purple-950 border border-purple-200 dark:border-purple-800 rounded-lg'>\n        <p className='text-sm text-purple-800 dark:text-purple-200'>\n          <strong>Example:</strong> Employee table with custom expand toggle buttons instead of\n          default chevron icons.\n        </p>\n      </div>\n\n      <div className='h-96'>\n        <VirtualTable\n          data={data.slice(0, 10)}\n          filterHeight={32}\n          headerHeight={40}\n          headerMode='double'\n          headers={headers}\n          onRenderExpandedContent={renderEmployeeExpandedContent}\n          rowHeight={32}\n          rowKey='id'\n        />\n      </div>\n\n      {showCode && (\n        <CodeBlock code={CODE_EXAMPLES.customToggle} title='Custom Expand Toggle Example' />\n      )}\n    </section>\n  );\n};\n\nexport default memo(CustomToggleSection);\n\n","import { memo } from 'react';\n\nconst FeaturesSection = () => {\n  return (\n    <section>\n      <h2 className='text-2xl font-semibold tracking-tight mb-4'>Expand Row Features</h2>\n      <div className='grid gap-4 md:grid-cols-2'>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>✅ Core Features</h3>\n          <ul className='text-sm text-muted-foreground space-y-1'>\n            <li>• Click expand button to show/hide row details</li>\n            <li>• Custom expand content with any React components</li>\n            <li>• Nested tables and complex layouts supported</li>\n            <li>• Smooth expand/collapse animations</li>\n            <li>• Virtual scrolling works with expanded rows</li>\n          </ul>\n        </div>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>🎨 Customization</h3>\n          <ul className='text-sm text-muted-foreground space-y-1'>\n            <li>• Custom expand toggle buttons</li>\n            <li>• Flexible content rendering</li>\n            <li>• Styled expand content areas</li>\n            <li>• Integration with existing table features</li>\n            <li>• TypeScript support for all props</li>\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(FeaturesSection);\n\n","import { VirtualTable } from '../../../../components/virtual-table';\nimport type { Company, Department } from '../utils';\nimport { getDepartmentHeaders, getTeamHeaders } from '../utils/table-headers';\n\nexport const renderCompanyExpandedContent = (company: Company) => {\n  const departmentHeaders = getDepartmentHeaders();\n\n  const renderDepartmentTeams = (department: Department) => {\n    const teamHeaders = getTeamHeaders();\n\n    return (\n      <div className='p-3 bg-blue-50 dark:bg-blue-950 border-l-4 border-blue-400 dark:border-blue-500 ml-4'>\n        <h5 className='font-medium text-sm mb-3 text-blue-800 dark:text-blue-200'>\n          {department.name} Teams\n        </h5>\n        <div className='h-48'>\n          <VirtualTable\n            data={department.teams}\n            headerHeight={28}\n            headerMode='single'\n            headers={teamHeaders}\n            hideHeader={false}\n            rowHeight={24}\n            rowKey='name'\n          />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className='p-4 bg-gray-50 dark:bg-gray-900 border-l-4 border-green-500 dark:border-green-400'>\n      <h4 className='font-semibold text-lg mb-4 text-gray-800 dark:text-gray-200'>\n        Company Departments\n      </h4>\n      <div className='h-64'>\n        <VirtualTable\n          data={company.departments}\n          headerHeight={32}\n          headerMode='single'\n          headers={departmentHeaders}\n          hideHeader={false}\n          onRenderExpandedContent={renderDepartmentTeams}\n          rowHeight={28}\n          rowKey='name'\n        />\n      </div>\n    </div>\n  );\n};\n\n","import { memo, useState } from 'react';\nimport { VirtualTable } from '../../../../components/virtual-table';\nimport { CODE_EXAMPLES, type Company } from '../utils';\nimport { getCompanyHeaders } from '../utils/table-headers';\nimport CodeBlock from './code-block';\nimport { renderCompanyExpandedContent } from './render-company-content';\n\ntype NestedTableSectionProps = {\n  data: Company[];\n};\n\nconst NestedTableSection = ({ data }: NestedTableSectionProps) => {\n  const [showCode, setShowCode] = useState(false);\n  const headers = getCompanyHeaders();\n\n  return (\n    <section>\n      <div className='flex items-center justify-between mb-4'>\n        <h2 className='text-2xl font-semibold tracking-tight'>Nested Table in Expand Row</h2>\n        <button\n          className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2'\n          onClick={() => setShowCode(!showCode)}\n        >\n          {showCode ? 'Hide Code' : 'Show Code'}\n        </button>\n      </div>\n\n      <div className='mb-4 p-4 bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg'>\n        <p className='text-sm text-green-800 dark:text-green-200'>\n          <strong>Example:</strong> Company table with expandable rows containing nested\n          VirtualTable components. Each department can be expanded to show teams, demonstrating\n          recursive expand functionality.\n        </p>\n      </div>\n\n      <div className='h-96'>\n        <VirtualTable\n          data={data}\n          filterHeight={32}\n          headerHeight={40}\n          headerMode='double'\n          headers={headers}\n          onRenderExpandedContent={renderCompanyExpandedContent}\n          rowHeight={32}\n          rowKey='id'\n        />\n      </div>\n\n      {showCode && <CodeBlock code={CODE_EXAMPLES.nestedTable} title='Nested Table Example' />}\n    </section>\n  );\n};\n\nexport default memo(NestedTableSection);\n\n","import { memo } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NextStepsSection = () => {\n  return (\n    <section>\n      <div className='rounded-lg border bg-muted/50 p-6'>\n        <h3 className='font-semibold text-lg mb-2'>🚀 Next Steps</h3>\n        <p className='text-sm text-muted-foreground mb-4'>\n          Ready to explore more advanced features? Check out these examples:\n        </p>\n        <div className='flex flex-wrap gap-2'>\n          <Link\n            className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-8 px-3'\n            to='/docs/examples/checkbox-selection'\n          >\n            Checkbox Selection\n          </Link>\n          <Link\n            className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-8 px-3'\n            to='/docs/examples/freeze-column'\n          >\n            Freeze Columns\n          </Link>\n          <Link\n            className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-8 px-3'\n            to='/docs/examples/header-customization'\n          >\n            Header Customization\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(NextStepsSection);\n\n","import { memo, useMemo } from 'react';\nimport {\n  ApiReferenceSection,\n  BasicExpandSection,\n  CustomToggleSection,\n  FeaturesSection,\n  NestedTableSection,\n  NextStepsSection,\n} from './components';\nimport { generateCompanyData, generateEmployeeData } from './utils';\n\nconst ExpandRowPage = () => {\n  // Memoized data generation to avoid regenerating on every render\n  const employeeData = useMemo(() => generateEmployeeData(), []);\n  const companyData = useMemo(() => generateCompanyData(), []);\n\n  return (\n    <div className='space-y-8'>\n      {/* Page Header */}\n      <div>\n        <h1 className='text-4xl font-bold tracking-tight'>Expand Row</h1>\n        <p className='text-xl text-muted-foreground mt-4'>\n          Learn how to implement expandable rows in your virtual table with detailed content,\n          nested tables, and custom expand toggles.\n        </p>\n      </div>\n\n      {/* Basic Expand Row Example */}\n      <BasicExpandSection data={employeeData} />\n\n      {/* Nested Table Example */}\n      <NestedTableSection data={companyData} />\n\n      {/* Custom Toggle Example */}\n      <CustomToggleSection data={employeeData} />\n\n      {/* Features Section */}\n      <FeaturesSection />\n\n      {/* API Reference */}\n      <ApiReferenceSection />\n\n      {/* Next Steps */}\n      <NextStepsSection />\n    </div>\n  );\n};\n\nexport default memo(ExpandRowPage);\n\n"],"names":["ApiReferenceSection","jsx","jsxs","ApiReferenceSection$1","memo","generateEmployeeData","_","index","faker","generateCompanyData","getEmployeeHeaders","item","getCustomEmployeeHeaders","_item","isExpanded","getCompanyHeaders","getDepartmentHeaders","getTeamHeaders","CODE_EXAMPLES","CodeBlock","title","code","CodeBlock$1","renderEmployeeExpandedContent","employee","skill","idx","project","BasicExpandSection","data","showCode","setShowCode","useState","headers","VirtualTable","BasicExpandSection$1","CustomToggleSection","CustomToggleSection$1","FeaturesSection","FeaturesSection$1","renderCompanyExpandedContent","company","departmentHeaders","renderDepartmentTeams","department","teamHeaders","NestedTableSection","NestedTableSection$1","NextStepsSection","Link","NextStepsSection$1","ExpandRowPage","employeeData","useMemo","companyData"],"mappings":"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"}