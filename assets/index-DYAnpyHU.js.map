{"version":3,"file":"index-DYAnpyHU.js","sources":["../../src/pages/examples-page/large-dataset-page/components/advanced-features-section.tsx","../../src/pages/examples-page/large-dataset-page/components/best-practices-section.tsx","../../src/pages/examples-page/large-dataset-page/components/code-block.tsx","../../src/pages/examples-page/large-dataset-page/utils/data-generator.ts","../../src/pages/examples-page/large-dataset-page/utils/table-headers.ts","../../src/pages/examples-page/large-dataset-page/utils/constants.ts","../../src/pages/examples-page/large-dataset-page/components/large-dataset-section.tsx","../../src/pages/examples-page/large-dataset-page/components/medium-dataset-section.tsx","../../src/pages/examples-page/large-dataset-page/components/memory-management-section.tsx","../../src/pages/examples-page/large-dataset-page/components/next-steps-section.tsx","../../src/pages/examples-page/large-dataset-page/components/performance-metrics-section.tsx","../../src/pages/examples-page/large-dataset-page/components/performance-overview.tsx","../../src/pages/examples-page/large-dataset-page/index.tsx"],"sourcesContent":["import { memo } from 'react';\n\nconst AdvancedFeaturesSection = () => {\n  return (\n    <section className='mb-8'>\n      <div className='flex items-center justify-between mb-4'>\n        <h2 className='text-2xl font-semibold tracking-tight'>Advanced Features</h2>\n      </div>\n\n      <div className='mb-4 p-4 bg-indigo-50 border border-indigo-200 rounded-lg'>\n        <p className='text-sm text-indigo-800'>\n          <strong>Advanced Techniques:</strong> Explore server-side pagination, progressive\n          loading, background data processing, and other advanced patterns for handling massive\n          datasets.\n        </p>\n      </div>\n\n      <div className='grid gap-4 md:grid-cols-3'>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>üîÑ Server-Side Pagination</h3>\n          <p className='text-sm text-muted-foreground'>\n            Load data in chunks from the server to handle datasets larger than available memory.\n          </p>\n        </div>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>üìà Progressive Loading</h3>\n          <p className='text-sm text-muted-foreground'>\n            Load more data as the user scrolls, providing infinite scroll functionality.\n          </p>\n        </div>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>‚öôÔ∏è Background Processing</h3>\n          <p className='text-sm text-muted-foreground'>\n            Use Web Workers to process large datasets without blocking the main thread.\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(AdvancedFeaturesSection);\n\n","import { memo } from 'react';\n\nconst BestPracticesSection = () => {\n  return (\n    <section className='mb-8'>\n      <h2 className='text-2xl font-semibold tracking-tight mb-4'>Best Practices</h2>\n      <div className='grid gap-4 md:grid-cols-2'>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>üìä Data Management</h3>\n          <ul className='text-sm text-muted-foreground space-y-1'>\n            <li>‚Ä¢ Use memoization to prevent unnecessary data regeneration</li>\n            <li>‚Ä¢ Implement efficient filtering and sorting algorithms</li>\n            <li>‚Ä¢ Consider data pagination for datasets &gt; 1M records</li>\n            <li>‚Ä¢ Use freeze columns for important identifying information</li>\n            <li>‚Ä¢ Optimize data structure for better performance</li>\n          </ul>\n        </div>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>üéØ User Experience</h3>\n          <ul className='text-sm text-muted-foreground space-y-1'>\n            <li>‚Ä¢ Provide loading indicators for data generation</li>\n            <li>‚Ä¢ Show dataset size and loading progress</li>\n            <li>‚Ä¢ Implement search with debouncing</li>\n            <li>‚Ä¢ Use appropriate row heights for readability</li>\n            <li>‚Ä¢ Consider virtual scrolling for smooth performance</li>\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(BestPracticesSection);\n\n","import { memo } from 'react';\n\ntype CodeBlockProps = {\n  title: string;\n  code: string;\n};\n\nconst CodeBlock = ({ title, code }: CodeBlockProps) => {\n  return (\n    <div className='mt-4 border rounded-lg overflow-hidden'>\n      <div className='bg-muted px-4 py-2 border-b'>\n        <span className='text-sm font-medium'>{title}</span>\n      </div>\n      <pre className='p-4 overflow-x-auto bg-background'>\n        <code className='text-sm'>{code}</code>\n      </pre>\n    </div>\n  );\n};\n\nexport default memo(CodeBlock);\n\n","import { faker } from '@faker-js/faker';\n\nexport type EmployeeData = {\n  id: number;\n  name: string;\n  email: string;\n  phone: string;\n  department: string;\n  position: string;\n  salary: number;\n  startDate: string;\n  performance: number;\n  manager: string;\n  location: string;\n  country: string;\n  skills: string[];\n  projects: number;\n  experience: number;\n  status: string;\n  lastLogin: string;\n};\n\nexport const generateDataset = (count: number): EmployeeData[] => {\n  const data = Array.from({ length: count }, (_, index) => ({\n    id: index + 1,\n    name: faker.person.fullName(),\n    email: faker.internet.email(),\n    phone: faker.phone.number(),\n    department: faker.commerce.department(),\n    position: faker.person.jobTitle(),\n    salary: faker.number.int({ min: 30000, max: 200000 }),\n    startDate: faker.date.past({ years: 10 }).toISOString().split('T')[0],\n    performance: faker.number.int({ min: 1, max: 5 }),\n    manager: faker.person.fullName(),\n    location: faker.location.city(),\n    country: faker.location.country(),\n    skills: faker.helpers.arrayElements(\n      ['React', 'TypeScript', 'Node.js', 'Python', 'Java', 'C#', 'Go', 'Rust', 'Vue', 'Angular'],\n      { min: 2, max: 6 },\n    ),\n    projects: faker.number.int({ min: 1, max: 20 }),\n    experience: faker.number.int({ min: 0, max: 15 }),\n    status: faker.helpers.arrayElement(['Active', 'Inactive', 'On Leave', 'Terminated']),\n    lastLogin: faker.date.recent({ days: 30 }).toISOString(),\n  }));\n\n  return data;\n};\n\nexport const generateDatasetAsync = async (count: number): Promise<EmployeeData[]> => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const data = generateDataset(count);\n      resolve(data);\n    }, 100);\n  });\n};\n","import type { IHeader } from '../../../../components/virtual-table';\nimport type { EmployeeData } from './data-generator';\n\nexport const getEmployeeHeaders = (): IHeader<EmployeeData>[] => [\n  { key: 'id', caption: 'ID', width: 80, freeze: 'left' },\n  { key: 'name', caption: 'Name', width: 200, freeze: 'left' },\n  { key: 'email', caption: 'Email', width: 250 },\n  { key: 'phone', caption: 'Phone', width: 150 },\n  { key: 'department', caption: 'Department', width: 150 },\n  { key: 'position', caption: 'Position', width: 180 },\n  {\n    key: 'salary',\n    caption: 'Salary',\n    width: 120,\n    renderCell: (item) => `$${item.salary.toLocaleString()}`,\n  },\n  { key: 'startDate', caption: 'Start Date', width: 120 },\n  { key: 'performance', caption: 'Rating', width: 100 },\n  { key: 'manager', caption: 'Manager', width: 180 },\n  { key: 'location', caption: 'Location', width: 150 },\n  { key: 'country', caption: 'Country', width: 120 },\n  { key: 'status', caption: 'Status', width: 120, freeze: 'right' },\n];\n\n","export const CODE_EXAMPLES = {\n  basicUsage: `import { VirtualTable, type IHeader } from '@knitto/virtual-table';\nimport { useMemo } from 'react';\n\nconst LargeDatasetTable = () => {\n  // Generate large dataset (1M records)\n  const data = useMemo(() => {\n    return Array.from({ length: 1000000 }, (_, index) => ({\n      id: index + 1,\n      name: faker.person.fullName(),\n      email: faker.internet.email(),\n      // ... other fields\n    }));\n  }, []);\n\n  const headers: IHeader<(typeof data)[0]>[] = [\n    { key: 'id', caption: 'ID', width: 80, freeze: 'left' },\n    { key: 'name', caption: 'Name', width: 200, freeze: 'left' },\n    { key: 'email', caption: 'Email', width: 250 },\n    // ... other headers\n  ];\n\n  return (\n    <VirtualTable\n      headers={headers}\n      data={data}\n      rowKey=\"id\"\n      rowHeight={32}\n      headerHeight={40}\n      filterHeight={32}\n    />\n  );\n};`,\n\n  optimization: `// Performance optimization techniques\n\n// 1. Memoize data generation\nconst data = useMemo(() => generateLargeDataset(1000000), []);\n\n// 2. Use freeze columns for important data\nconst headers = [\n  { key: 'id', caption: 'ID', width: 80, freeze: 'left' },\n  { key: 'name', caption: 'Name', width: 200, freeze: 'left' },\n  // ... other columns\n];\n\n// 3. Optimize row height\n<VirtualTable\n  rowHeight={32} // Fixed height for better performance\n  // ... other props\n/>\n\n// 4. Use efficient filtering\nconst filteredData = useMemo(() => {\n  return data.filter(item => \n    item.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n}, [data, searchTerm]);`,\n};\n\nexport const PERFORMANCE_DATA = [\n  {\n    metric: 'Initial Render Time',\n    value: '< 100ms',\n    description: 'Time to render the first visible rows regardless of dataset size',\n  },\n  {\n    metric: 'Memory Usage',\n    value: '~2-5MB',\n    description: 'Constant memory usage regardless of dataset size (only visible rows in DOM)',\n  },\n  {\n    metric: 'Scroll Performance',\n    value: '60 FPS',\n    description: 'Smooth scrolling with virtual scrolling technology',\n  },\n  {\n    metric: 'Search/Filter Speed',\n    value: 'Instant',\n    description: 'Client-side filtering with optimized algorithms',\n  },\n  {\n    metric: 'Sort Performance',\n    value: '< 50ms',\n    description: 'Efficient sorting algorithms for large datasets',\n  },\n];\n\n","import { memo, useState, useCallback } from 'react';\nimport { VirtualTable } from '../../../../components/virtual-table';\nimport { CODE_EXAMPLES, type EmployeeData, generateDatasetAsync } from '../utils';\nimport { getEmployeeHeaders } from '../utils/table-headers';\nimport CodeBlock from './code-block';\n\nconst LargeDatasetSection = () => {\n  const [showCode, setShowCode] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [data, setData] = useState<EmployeeData[]>([]);\n  const headers = getEmployeeHeaders();\n\n  const handleGenerateDataset = useCallback(async () => {\n    setIsGenerating(true);\n    const generatedData = await generateDatasetAsync(100000);\n    setData(generatedData);\n    setIsGenerating(false);\n  }, []);\n\n  return (\n    <section className='mb-8'>\n      <div className='flex items-center justify-between mb-4'>\n        <h2 className='text-2xl font-semibold tracking-tight'>Large Dataset (100,000 records)</h2>\n        <button\n          className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2'\n          onClick={() => setShowCode(!showCode)}\n        >\n          {showCode ? 'Hide Code' : 'Show Code'}\n        </button>\n      </div>\n\n      <div className='mb-4 p-4 bg-orange-50 border border-orange-200 rounded-lg'>\n        <p className='text-sm text-orange-800'>\n          <strong>Example:</strong> 100,000 employee records. Click the button below to generate\n          the dataset. Notice how the table maintains smooth performance even with this large\n          dataset.\n        </p>\n      </div>\n\n      <div className='mb-4 flex items-center space-x-4'>\n        <button\n          className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2'\n          disabled={isGenerating}\n          onClick={handleGenerateDataset}\n        >\n          {isGenerating ? 'Generating...' : 'Generate 100K Records'}\n        </button>\n        {data.length > 0 && (\n          <span className='text-sm text-muted-foreground'>\n            Loaded: {data.length.toLocaleString()} records\n          </span>\n        )}\n      </div>\n\n      {data.length > 0 && (\n        <div className='h-96'>\n          <VirtualTable\n            data={data}\n            filterHeight={32}\n            headerHeight={40}\n            headers={headers}\n            rowHeight={32}\n            rowKey='id'\n          />\n        </div>\n      )}\n\n      {showCode && (\n        <CodeBlock code={CODE_EXAMPLES.optimization} title='Performance Optimization Techniques' />\n      )}\n    </section>\n  );\n};\n\nexport default memo(LargeDatasetSection);\n\n","import { memo, useState } from 'react';\nimport { VirtualTable } from '../../../../components/virtual-table';\nimport { CODE_EXAMPLES, type EmployeeData } from '../utils';\nimport { getEmployeeHeaders } from '../utils/table-headers';\nimport CodeBlock from './code-block';\n\ntype MediumDatasetSectionProps = {\n  data: EmployeeData[];\n};\n\nconst MediumDatasetSection = ({ data }: MediumDatasetSectionProps) => {\n  const [showCode, setShowCode] = useState(false);\n  const headers = getEmployeeHeaders();\n\n  return (\n    <section className='mb-8'>\n      <div className='flex items-center justify-between mb-4'>\n        <h2 className='text-2xl font-semibold tracking-tight'>Medium Dataset (10,000 records)</h2>\n        <button\n          className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2'\n          onClick={() => setShowCode(!showCode)}\n        >\n          {showCode ? 'Hide Code' : 'Show Code'}\n        </button>\n      </div>\n\n      <div className='mb-4 p-4 bg-green-50 border border-green-200 rounded-lg'>\n        <p className='text-sm text-green-800'>\n          <strong>Example:</strong> 10,000 employee records with freeze columns for ID and Name.\n          This demonstrates smooth performance with a substantial dataset.\n        </p>\n      </div>\n\n      <div className='h-96'>\n        <VirtualTable\n          data={data}\n          filterHeight={32}\n          headerHeight={40}\n          headers={headers}\n          rowHeight={32}\n          rowKey='id'\n        />\n      </div>\n\n      {showCode && (\n        <CodeBlock code={CODE_EXAMPLES.basicUsage} title='Basic Large Dataset Implementation' />\n      )}\n    </section>\n  );\n};\n\nexport default memo(MediumDatasetSection);\n\n","import { memo } from 'react';\n\nconst MemoryManagementSection = () => {\n  return (\n    <section className='mb-8'>\n      <div className='flex items-center justify-between mb-4'>\n        <h2 className='text-2xl font-semibold tracking-tight'>Memory Management</h2>\n      </div>\n\n      <div className='mb-4 p-4 bg-purple-50 border border-purple-200 rounded-lg'>\n        <p className='text-sm text-purple-800'>\n          <strong>Memory Optimization:</strong> Learn advanced techniques for managing memory usage\n          with very large datasets, including lazy loading, progressive loading, and background\n          processing.\n        </p>\n      </div>\n\n      <div className='grid gap-4 md:grid-cols-2'>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>üß† Memory Benefits</h3>\n          <ul className='text-sm text-muted-foreground space-y-1'>\n            <li>‚Ä¢ Only visible rows are rendered in DOM</li>\n            <li>‚Ä¢ Constant memory usage regardless of dataset size</li>\n            <li>‚Ä¢ Automatic cleanup of off-screen elements</li>\n            <li>‚Ä¢ Efficient garbage collection</li>\n            <li>‚Ä¢ No memory leaks with proper implementation</li>\n          </ul>\n        </div>\n        <div className='border rounded-lg p-4'>\n          <h3 className='font-semibold mb-2'>‚ö° Performance Tips</h3>\n          <ul className='text-sm text-muted-foreground space-y-1'>\n            <li>‚Ä¢ Use memoization for data generation</li>\n            <li>‚Ä¢ Implement debounced search/filtering</li>\n            <li>‚Ä¢ Freeze important columns for better UX</li>\n            <li>‚Ä¢ Use fixed row heights for optimal performance</li>\n            <li>‚Ä¢ Consider server-side pagination for 1M+ records</li>\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(MemoryManagementSection);\n\n","import { memo } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NextStepsSection = () => {\n  return (\n    <section>\n      <div className='rounded-lg border bg-muted/50 p-6'>\n        <h3 className='font-semibold text-lg mb-2'>üöÄ Next Steps</h3>\n        <p className='text-sm text-muted-foreground mb-4'>\n          Ready to implement large dataset handling? Explore these related features:\n        </p>\n        <div className='flex flex-wrap gap-2'>\n          <Link\n            className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-8 px-3'\n            to='/docs/examples/freeze-column'\n          >\n            Freeze Columns\n          </Link>\n          <Link\n            className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-8 px-3'\n            to='/docs/examples/header-grouping'\n          >\n            Header Grouping\n          </Link>\n          <Link\n            className='inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-8 px-3'\n            to='/docs/examples/server-filter'\n          >\n            Advanced Filtering\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(NextStepsSection);\n\n","import { memo } from 'react';\n\nconst PerformanceMetricsSection = () => {\n  return (\n    <section className='mb-8'>\n      <h2 className='text-2xl font-semibold tracking-tight mb-4'>Performance Metrics</h2>\n      <div className='border rounded-lg overflow-hidden'>\n        <div className='bg-muted px-4 py-2 border-b'>\n          <span className='text-sm font-medium'>Benchmark Results (1M records)</span>\n        </div>\n        <div className='p-4'>\n          <div className='grid gap-4 md:grid-cols-2 lg:grid-cols-4'>\n            <div className='text-center'>\n              <div className='text-2xl font-bold text-green-600'>&lt; 100ms</div>\n              <div className='text-sm text-muted-foreground'>Initial Render</div>\n            </div>\n            <div className='text-center'>\n              <div className='text-2xl font-bold text-blue-600'>~2-5MB</div>\n              <div className='text-sm text-muted-foreground'>Memory Usage</div>\n            </div>\n            <div className='text-center'>\n              <div className='text-2xl font-bold text-purple-600'>60 FPS</div>\n              <div className='text-sm text-muted-foreground'>Scroll Performance</div>\n            </div>\n            <div className='text-center'>\n              <div className='text-2xl font-bold text-orange-600'>&lt; 50ms</div>\n              <div className='text-sm text-muted-foreground'>Search/Filter</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default memo(PerformanceMetricsSection);\n\n","import { memo } from 'react';\nimport { VirtualTable, type IHeader } from '../../../../components/virtual-table';\nimport { PERFORMANCE_DATA } from '../utils';\n\nconst performanceHeaders: IHeader<(typeof PERFORMANCE_DATA)[0]>[] = [\n  { key: 'metric', caption: 'Metric', width: 200 },\n  { key: 'value', caption: 'Value', width: 150 },\n  { key: 'description', caption: 'Description', width: 300 },\n];\n\nconst PerformanceOverview = () => {\n  return (\n    <section className='mb-8'>\n      <h2 className='text-2xl font-semibold tracking-tight mb-4'>Performance Overview</h2>\n      <div className='mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg'>\n        <p className='text-sm text-blue-800'>\n          <strong>Virtual Table Performance:</strong> The virtual table is specifically designed to\n          handle massive datasets efficiently. It uses virtual scrolling to render only visible\n          rows, maintaining constant memory usage regardless of dataset size.\n        </p>\n      </div>\n\n      <div className='h-64'>\n        <VirtualTable\n          data={PERFORMANCE_DATA}\n          filterHeight={32}\n          headerHeight={40}\n          headers={performanceHeaders}\n          rowHeight={40}\n          rowKey='metric'\n        />\n      </div>\n    </section>\n  );\n};\n\nexport default memo(PerformanceOverview);\n\n","import { memo, useMemo, useRef } from 'react';\nimport {\n  AdvancedFeaturesSection,\n  BestPracticesSection,\n  LargeDatasetSection,\n  MediumDatasetSection,\n  MemoryManagementSection,\n  PerformanceMetricsSection,\n  PerformanceOverview,\n} from './components';\nimport { generateDataset } from './utils';\nimport { useWindowVirtualizer } from '@tanstack/react-virtual';\n\nconst LargeDatasetPage = () => {\n  const listRef = useRef<HTMLDivElement | null>(null);\n\n  const virtualizer = useWindowVirtualizer({\n    count: 8,\n    estimateSize: () => 600,\n    overscan: 2,\n    scrollMargin: listRef.current?.offsetTop ?? 0,\n    measureElement:\n      typeof window !== 'undefined' && navigator.userAgent.indexOf('Firefox') === -1\n        ? (element) => element.getBoundingClientRect().height\n        : undefined,\n  });\n\n  // Memoized data generation to avoid regenerating on every render\n  const mediumData = useMemo(() => generateDataset(10000), []);\n\n  const listSection = [\n    <PerformanceOverview />,\n    <MediumDatasetSection data={mediumData} />,\n    <LargeDatasetSection />,\n    <MemoryManagementSection />,\n    <AdvancedFeaturesSection />,\n    <BestPracticesSection />,\n    <PerformanceMetricsSection />,\n  ];\n\n  return (\n    <div ref={listRef} className='space-y-8'>\n      {/* Page Header */}\n      <div>\n        <h1 className='text-4xl font-bold tracking-tight'>Large Datasets</h1>\n        <p className='text-xl text-muted-foreground mt-4'>\n          Learn how to handle massive datasets (1M+ records) with virtual table's advanced performance\n          optimizations and memory management techniques.\n        </p>\n      </div>\n\n      <div\n        style={{\n          height: virtualizer.getTotalSize(),\n          width: '100%',\n          position: 'relative',\n        }}\n      >\n        {virtualizer.getVirtualItems().map((virtualItem) => (\n          <div\n            key={virtualItem.key}\n            data-index={virtualItem.index}\n            ref={(node) => virtualizer.measureElement(node)}\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              transform: `translateY(${virtualItem.start - virtualizer.options.scrollMargin}px)`,\n            }}\n          >\n            {listSection[virtualItem.index]}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(LargeDatasetPage);\n"],"names":["AdvancedFeaturesSection","jsxs","jsx","AdvancedFeaturesSection$1","memo","BestPracticesSection","BestPracticesSection$1","CodeBlock","title","code","CodeBlock$1","generateDataset","count","_","index","faker","generateDatasetAsync","resolve","data","getEmployeeHeaders","item","CODE_EXAMPLES","PERFORMANCE_DATA","LargeDatasetSection","showCode","setShowCode","useState","isGenerating","setIsGenerating","setData","headers","handleGenerateDataset","useCallback","generatedData","VirtualTable","LargeDatasetSection$1","MediumDatasetSection","MediumDatasetSection$1","MemoryManagementSection","MemoryManagementSection$1","NextStepsSection","Link","PerformanceMetricsSection","PerformanceMetricsSection$1","performanceHeaders","PerformanceOverview","PerformanceOverview$1","LargeDatasetPage","listRef","useRef","virtualizer","useWindowVirtualizer","_a","element","mediumData","useMemo","listSection","virtualItem","node"],"mappings":"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"}